mode: deployment
presets:
  kubernetesAttributes:
    enabled: true
    # You can also configure the preset to add all of the associated pod's labels and annotations to you telemetry.
    # The label/annotation name will become the resource attribute's key.
    extractAllPodLabels: true
extraEnvsFrom:
  - secretRef:
      name: open-telemetry-collector
image:
  # Temporary override for image tag, the helm chart has not been released yet
  tag: 0.97.0
config:
  extensions:
    bearertokenauth:
      scheme: SUSEObservability
      token: "${env:API_KEY}"
  exporters:
    # Exporter for traces to traffic mirror (used by the common config)
    otlp/suseobservability:
      auth:
        authenticator: bearertokenauth
  processors:
    tail_sampling:
      decision_wait: 10s
      policies:
      - name: rate-limited-composite
        type: composite
        composite:
          max_total_spans_per_second: 500
          policy_order: [errors, slow-traces, rest]
          composite_sub_policy:
          - name: errors
            type: status_code
            status_code:
              status_codes: [ ERROR ]
          - name: slow-traces
            type: latency
            latency:
              threshold_ms: 1000
          - name: rest
            type: always_sample
          rate_allocation:
          - policy: errors
            percent: 33
          - policy: slow-traces
            percent: 33
          - policy: rest
            percent: 34
    resource:
      attributes:
      - key: service.instance.id
        from_attribute: k8s.pod.uid
        action: insert
    filter/dropMissingK8sAttributes:
      error_mode: ignore
      traces:
        span:
          - resource.attributes["k8s.node.name"] == nil
          - resource.attributes["k8s.pod.uid"] == nil
          - resource.attributes["k8s.namespace.name"] == nil
          - resource.attributes["k8s.pod.name"] == nil
  # the spanmetrics connector gets lost without at least some config present
  # a (semi)random property (exemplars.enabled) is used here with its default value
  connectors:
    spanmetrics:
      # Drop metrics for which no spans have been observed for 5 minutes to avoid many useless, but active, timeseries
      metrics_expiration: 5m
      namespace: otel_span
    routing/traces:
      error_mode: ignore
      match_once: false
      table:
      - statement: route()
        pipelines: [traces/sampling, traces/spanmetrics]
  receivers:
    prometheus:
      config:
        scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
              - targets:
                  - ${`${env:MY_POD_IP}:8888`}
  service:
    extensions:
      - health_check
      - bearertokenauth
    pipelines:
      logs:
        receivers: [otlp]
        processors: [memory_limiter, resource, resource/addk8scluster, batch]
        exporters: [debug]
      traces:
        receivers: [otlp]
        processors: [filter/dropMissingK8sAttributes, memory_limiter, resource/addk8scluster, resource]
        exporters: [routing/traces]
      traces/spanmetrics:
        receivers: [routing/traces]
        processors: []
        exporters: [spanmetrics]
      traces/sampling:
        receivers: [routing/traces]
        processors: [tail_sampling, batch]
        exporters: [debug, otlp/suseobservability]
      metrics:
        receivers: [otlp, spanmetrics, prometheus]
        processors: [memory_limiter, resource/addk8scluster, resource, batch]
        exporters: [debug, otlp/suseobservability]
ports:
  metrics:
    enabled: true
podMonitor:
  enabled: true
  extraLabels:
    release: prometheus-operator
