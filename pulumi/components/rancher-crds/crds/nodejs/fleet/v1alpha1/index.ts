// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ClusterGroupArgs } from "./clusterGroup";
export type ClusterGroup = import("./clusterGroup").ClusterGroup;
export const ClusterGroup: typeof import("./clusterGroup").ClusterGroup = null as any;
utilities.lazyLoad(exports, ["ClusterGroup"], () => require("./clusterGroup"));

export { ClusterGroupListArgs } from "./clusterGroupList";
export type ClusterGroupList = import("./clusterGroupList").ClusterGroupList;
export const ClusterGroupList: typeof import("./clusterGroupList").ClusterGroupList = null as any;
utilities.lazyLoad(exports, ["ClusterGroupList"], () => require("./clusterGroupList"));

export { ClusterGroupPatchArgs } from "./clusterGroupPatch";
export type ClusterGroupPatch = import("./clusterGroupPatch").ClusterGroupPatch;
export const ClusterGroupPatch: typeof import("./clusterGroupPatch").ClusterGroupPatch = null as any;
utilities.lazyLoad(exports, ["ClusterGroupPatch"], () => require("./clusterGroupPatch"));

export { GitRepoArgs } from "./gitRepo";
export type GitRepo = import("./gitRepo").GitRepo;
export const GitRepo: typeof import("./gitRepo").GitRepo = null as any;
utilities.lazyLoad(exports, ["GitRepo"], () => require("./gitRepo"));

export { GitRepoListArgs } from "./gitRepoList";
export type GitRepoList = import("./gitRepoList").GitRepoList;
export const GitRepoList: typeof import("./gitRepoList").GitRepoList = null as any;
utilities.lazyLoad(exports, ["GitRepoList"], () => require("./gitRepoList"));

export { GitRepoPatchArgs } from "./gitRepoPatch";
export type GitRepoPatch = import("./gitRepoPatch").GitRepoPatch;
export const GitRepoPatch: typeof import("./gitRepoPatch").GitRepoPatch = null as any;
utilities.lazyLoad(exports, ["GitRepoPatch"], () => require("./gitRepoPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:fleet.cattle.io/v1alpha1:ClusterGroup":
                return new ClusterGroup(name, <any>undefined, { urn })
            case "kubernetes:fleet.cattle.io/v1alpha1:ClusterGroupList":
                return new ClusterGroupList(name, <any>undefined, { urn })
            case "kubernetes:fleet.cattle.io/v1alpha1:ClusterGroupPatch":
                return new ClusterGroupPatch(name, <any>undefined, { urn })
            case "kubernetes:fleet.cattle.io/v1alpha1:GitRepo":
                return new GitRepo(name, <any>undefined, { urn })
            case "kubernetes:fleet.cattle.io/v1alpha1:GitRepoList":
                return new GitRepoList(name, <any>undefined, { urn })
            case "kubernetes:fleet.cattle.io/v1alpha1:GitRepoPatch":
                return new GitRepoPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "fleet.cattle.io/v1alpha1", _module)
