// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace catalog {
    export namespace v1 {
        /**
         * ClusterRepo represents a particular Helm repository. It contains details
         * about the chart location and the credentials needed for fetching charts
         * hosted in that particular Helm repository.
         */
        export interface ClusterRepo {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "catalog.cattle.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ClusterRepo";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.catalog.v1.ClusterRepoSpec;
            status: outputs.catalog.v1.ClusterRepoStatus;
        }

        /**
         * RepoSec contains details about the Helm repository that needs to be used.
         * More info: kubectl explain clusterrepo.spec
         */
        export interface ClusterRepoSpec {
            /**
             * BasicAuthSecretName is the client secret to be used to connect to the Helm repository.
             */
            basicAuthSecretName: string;
            /**
             * CABundle is a PEM encoded CA bundle which will be used to validate the repo's certificate.
             * If unspecified, system trust roots will be used.
             */
            caBundle: string;
            clientSecret: outputs.catalog.v1.ClusterRepoSpecClientSecret;
            /**
             * DisableSameOriginCheck if true attaches the Basic Auth Header to all Helm client API calls
             * regardless of whether the destination of the API call matches the origin of the repository's URL.
             * Defaults to false, which keeps the SameOrigin check enabled. Setting this to true is not recommended
             * in production environments due to the security implications.
             */
            disableSameOriginCheck: boolean;
            /**
             * If disabled the repo will not be updated and won't pick up new changes.
             */
            enabled: boolean;
            exponentialBackOffValues: outputs.catalog.v1.ClusterRepoSpecExponentialBackOffValues;
            /**
             * ForceUpdate will cause the Helm repository index file stored in Rancher
             * to be updated from the Helm repository URL. This means if there are changes
             * in the Helm repository they will be pulled into Rancher manager.
             */
            forceUpdate: string;
            /**
             * GitBranch is the git branch where the helm repository is hosted.
             */
            gitBranch: string;
            /**
             * GitRepo is the git repo to clone which contains the helm repository.
             */
            gitRepo: string;
            /**
             * InsecurePlainHTTP is only valid for OCI URL's and allows insecure connections to registries without enforcing TLS checks.
             */
            insecurePlainHttp: boolean;
            /**
             * InsecureSkipTLSverify will disable the TLS verification when downloading the Helm repository's index file.
             * Defaults is false. Enabling this is not recommended for production due to the security implications.
             */
            insecureSkipTLSVerify: boolean;
            /**
             * RefreshInterval is the interval at which the Helm repository should be refreshed.
             */
            refreshInterval: number;
            /**
             * ServiceAccount when specified will be used in creating Helm operation pods which in turn
             * run the Helm install or uninstall commands for a chart.
             */
            serviceAccount: string;
            /**
             * ServiceAccountNamespace is the namespace of the service account to use.
             */
            serviceAccountNamespace: string;
            /**
             * URL is the HTTP or OCI URL of the helm repository to connect to.
             */
            url: string;
        }

        /**
         * ClientSecret is the client secret to be used when connecting to a Helm repository.
         * The expected secret type is "kubernetes.io/basic-auth" or "kubernetes.io/tls" for HTTP Helm repositories,
         * only "kubernetes.io/basic-auth" for OCI Helm repostories and "kubernetes.io/basic-auth"
         * or "kubernetes.io/ssh-auth" for Github Helm repositories.
         */
        export interface ClusterRepoSpecClientSecret {
            /**
             * Name is the name of the secret.
             */
            name: string;
            /**
             * Namespace is the namespace where the secret resides.
             */
            namespace: string;
        }

        /**
         * ClientSecret is the client secret to be used when connecting to a Helm repository.
         * The expected secret type is "kubernetes.io/basic-auth" or "kubernetes.io/tls" for HTTP Helm repositories,
         * only "kubernetes.io/basic-auth" for OCI Helm repostories and "kubernetes.io/basic-auth"
         * or "kubernetes.io/ssh-auth" for Github Helm repositories.
         */
        export interface ClusterRepoSpecClientSecretPatch {
            /**
             * Name is the name of the secret.
             */
            name: string;
            /**
             * Namespace is the namespace where the secret resides.
             */
            namespace: string;
        }

        /**
         * ExponentialBackOffValues are values given to the Rancher manager to handle
         * 429 TOOMANYREQUESTS response code from the OCI registry.
         */
        export interface ClusterRepoSpecExponentialBackOffValues {
            maxRetries: number;
            maxWait: number;
            minWait: number;
        }

        /**
         * ExponentialBackOffValues are values given to the Rancher manager to handle
         * 429 TOOMANYREQUESTS response code from the OCI registry.
         */
        export interface ClusterRepoSpecExponentialBackOffValuesPatch {
            maxRetries: number;
            maxWait: number;
            minWait: number;
        }

        /**
         * RepoSec contains details about the Helm repository that needs to be used.
         * More info: kubectl explain clusterrepo.spec
         */
        export interface ClusterRepoSpecPatch {
            /**
             * BasicAuthSecretName is the client secret to be used to connect to the Helm repository.
             */
            basicAuthSecretName: string;
            /**
             * CABundle is a PEM encoded CA bundle which will be used to validate the repo's certificate.
             * If unspecified, system trust roots will be used.
             */
            caBundle: string;
            clientSecret: outputs.catalog.v1.ClusterRepoSpecClientSecretPatch;
            /**
             * DisableSameOriginCheck if true attaches the Basic Auth Header to all Helm client API calls
             * regardless of whether the destination of the API call matches the origin of the repository's URL.
             * Defaults to false, which keeps the SameOrigin check enabled. Setting this to true is not recommended
             * in production environments due to the security implications.
             */
            disableSameOriginCheck: boolean;
            /**
             * If disabled the repo will not be updated and won't pick up new changes.
             */
            enabled: boolean;
            exponentialBackOffValues: outputs.catalog.v1.ClusterRepoSpecExponentialBackOffValuesPatch;
            /**
             * ForceUpdate will cause the Helm repository index file stored in Rancher
             * to be updated from the Helm repository URL. This means if there are changes
             * in the Helm repository they will be pulled into Rancher manager.
             */
            forceUpdate: string;
            /**
             * GitBranch is the git branch where the helm repository is hosted.
             */
            gitBranch: string;
            /**
             * GitRepo is the git repo to clone which contains the helm repository.
             */
            gitRepo: string;
            /**
             * InsecurePlainHTTP is only valid for OCI URL's and allows insecure connections to registries without enforcing TLS checks.
             */
            insecurePlainHttp: boolean;
            /**
             * InsecureSkipTLSverify will disable the TLS verification when downloading the Helm repository's index file.
             * Defaults is false. Enabling this is not recommended for production due to the security implications.
             */
            insecureSkipTLSVerify: boolean;
            /**
             * RefreshInterval is the interval at which the Helm repository should be refreshed.
             */
            refreshInterval: number;
            /**
             * ServiceAccount when specified will be used in creating Helm operation pods which in turn
             * run the Helm install or uninstall commands for a chart.
             */
            serviceAccount: string;
            /**
             * ServiceAccountNamespace is the namespace of the service account to use.
             */
            serviceAccountNamespace: string;
            /**
             * URL is the HTTP or OCI URL of the helm repository to connect to.
             */
            url: string;
        }

        /**
         * RepoStatus contains details of the Helm repository that is currently being used in the cluster.
         * More info: kubectl explain clusterrepo.status
         */
        export interface ClusterRepoStatus {
            /**
             * Branch is the Git branch in the git repository used to fetch the Helm repository.
             */
            branch: string;
            /**
             * Commit is the latest commit in the cloned git repository by Rancher.
             */
            commit: string;
            /**
             * Conditions contain information about when the status conditions were updated and
             * to what.
             */
            conditions: outputs.catalog.v1.ClusterRepoStatusConditions[];
            /**
             * DownloadTime is the time when the index was last downloaded.
             */
            downloadTime: string;
            /**
             * IndexConfigMapName is the name of the configmap which stores the Helm repository index.
             */
            indexConfigMapName: string;
            /**
             * IndexConfigMapNamespace is the namespace of the Helm repository index configmap in which it resides.
             */
            indexConfigMapNamespace: string;
            /**
             * IndexConfigMapResourceVersion is the resourceversion of the Helm repository index configmap.
             */
            indexConfigMapResourceVersion: string;
            /**
             * The time the next retry will happen
             */
            nextRetryAt: string;
            /**
             * Number of times the handler will retry if it gets a 429 error
             */
            numberOfRetries: number;
            /**
             * ObservedGeneration is used by Rancher controller to track the latest generation of the resource that it triggered on.
             */
            observedGeneration: number;
            /**
             * If the handler should be skipped or not
             */
            shouldNotSkip: boolean;
            /**
             * URL used for fetching the Helm repository index file.
             */
            url: string;
        }

        export interface ClusterRepoStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * Human-readable message indicating details about last transition
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of cluster condition.
             */
            type: string;
        }

        export interface ClusterRepoStatusConditionsPatch {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * Human-readable message indicating details about last transition
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of cluster condition.
             */
            type: string;
        }

        /**
         * RepoStatus contains details of the Helm repository that is currently being used in the cluster.
         * More info: kubectl explain clusterrepo.status
         */
        export interface ClusterRepoStatusPatch {
            /**
             * Branch is the Git branch in the git repository used to fetch the Helm repository.
             */
            branch: string;
            /**
             * Commit is the latest commit in the cloned git repository by Rancher.
             */
            commit: string;
            /**
             * Conditions contain information about when the status conditions were updated and
             * to what.
             */
            conditions: outputs.catalog.v1.ClusterRepoStatusConditionsPatch[];
            /**
             * DownloadTime is the time when the index was last downloaded.
             */
            downloadTime: string;
            /**
             * IndexConfigMapName is the name of the configmap which stores the Helm repository index.
             */
            indexConfigMapName: string;
            /**
             * IndexConfigMapNamespace is the namespace of the Helm repository index configmap in which it resides.
             */
            indexConfigMapNamespace: string;
            /**
             * IndexConfigMapResourceVersion is the resourceversion of the Helm repository index configmap.
             */
            indexConfigMapResourceVersion: string;
            /**
             * The time the next retry will happen
             */
            nextRetryAt: string;
            /**
             * Number of times the handler will retry if it gets a 429 error
             */
            numberOfRetries: number;
            /**
             * ObservedGeneration is used by Rancher controller to track the latest generation of the resource that it triggered on.
             */
            observedGeneration: number;
            /**
             * If the handler should be skipped or not
             */
            shouldNotSkip: boolean;
            /**
             * URL used for fetching the Helm repository index file.
             */
            url: string;
        }

    }
}

export namespace fleet {
    export namespace v1alpha1 {
        /**
         * ClusterGroup is a re-usable selector to target a group of clusters.
         */
        export interface ClusterGroup {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "fleet.cattle.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ClusterGroup";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.fleet.v1alpha1.ClusterGroupSpec;
            status: outputs.fleet.v1alpha1.ClusterGroupStatus;
        }

        export interface ClusterGroupSpec {
            selector: outputs.fleet.v1alpha1.ClusterGroupSpecSelector;
        }

        export interface ClusterGroupSpecPatch {
            selector: outputs.fleet.v1alpha1.ClusterGroupSpecSelectorPatch;
        }

        /**
         * Selector is a label selector, used to select clusters for this group.
         */
        export interface ClusterGroupSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.fleet.v1alpha1.ClusterGroupSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterGroupSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterGroupSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Selector is a label selector, used to select clusters for this group.
         */
        export interface ClusterGroupSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.fleet.v1alpha1.ClusterGroupSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        export interface ClusterGroupStatus {
            /**
             * ClusterCount is the number of clusters in the cluster group.
             */
            clusterCount: number;
            /**
             * Conditions is a list of conditions and their statuses for the cluster group.
             */
            conditions: outputs.fleet.v1alpha1.ClusterGroupStatusConditions[];
            display: outputs.fleet.v1alpha1.ClusterGroupStatusDisplay;
            /**
             * NonReadyClusterCount is the number of clusters that are not ready.
             */
            nonReadyClusterCount: number;
            /**
             * NonReadyClusters is a list of cluster names that are not ready.
             */
            nonReadyClusters: string[];
            resourceCounts: outputs.fleet.v1alpha1.ClusterGroupStatusResourceCounts;
            summary: outputs.fleet.v1alpha1.ClusterGroupStatusSummary;
        }

        export interface ClusterGroupStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * Human-readable message indicating details about last transition
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of cluster condition.
             */
            type: string;
        }

        export interface ClusterGroupStatusConditionsPatch {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * Human-readable message indicating details about last transition
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of cluster condition.
             */
            type: string;
        }

        /**
         * Display contains the number of ready, desiredready clusters and a
         * summary state for the bundle's resources.
         */
        export interface ClusterGroupStatusDisplay {
            /**
             * ReadyBundles is a string in the form "%d/%d", that describes the
             * number of bundles that are ready vs. the number of bundles desired
             * to be ready.
             */
            readyBundles: string;
            /**
             * ReadyClusters is a string in the form "%d/%d", that describes the
             * number of clusters that are ready vs. the number of clusters desired
             * to be ready.
             */
            readyClusters: string;
            /**
             * State is a summary state for the cluster group, showing "NotReady" if
             * there are non-ready resources.
             */
            state: string;
        }

        /**
         * Display contains the number of ready, desiredready clusters and a
         * summary state for the bundle's resources.
         */
        export interface ClusterGroupStatusDisplayPatch {
            /**
             * ReadyBundles is a string in the form "%d/%d", that describes the
             * number of bundles that are ready vs. the number of bundles desired
             * to be ready.
             */
            readyBundles: string;
            /**
             * ReadyClusters is a string in the form "%d/%d", that describes the
             * number of clusters that are ready vs. the number of clusters desired
             * to be ready.
             */
            readyClusters: string;
            /**
             * State is a summary state for the cluster group, showing "NotReady" if
             * there are non-ready resources.
             */
            state: string;
        }

        export interface ClusterGroupStatusPatch {
            /**
             * ClusterCount is the number of clusters in the cluster group.
             */
            clusterCount: number;
            /**
             * Conditions is a list of conditions and their statuses for the cluster group.
             */
            conditions: outputs.fleet.v1alpha1.ClusterGroupStatusConditionsPatch[];
            display: outputs.fleet.v1alpha1.ClusterGroupStatusDisplayPatch;
            /**
             * NonReadyClusterCount is the number of clusters that are not ready.
             */
            nonReadyClusterCount: number;
            /**
             * NonReadyClusters is a list of cluster names that are not ready.
             */
            nonReadyClusters: string[];
            resourceCounts: outputs.fleet.v1alpha1.ClusterGroupStatusResourceCountsPatch;
            summary: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryPatch;
        }

        /**
         * ResourceCounts contains the number of resources in each state over
         * all bundles in the cluster group.
         */
        export interface ClusterGroupStatusResourceCounts {
            /**
             * DesiredReady is the number of resources that should be ready.
             */
            desiredReady: number;
            /**
             * Missing is the number of missing resources.
             */
            missing: number;
            /**
             * Modified is the number of resources that have been modified.
             */
            modified: number;
            /**
             * NotReady is the number of not ready resources. Resources are not
             * ready if they do not match any other state.
             */
            notReady: number;
            /**
             * Orphaned is the number of orphaned resources.
             */
            orphaned: number;
            /**
             * Ready is the number of ready resources.
             */
            ready: number;
            /**
             * Unknown is the number of resources in an unknown state.
             */
            unknown: number;
            /**
             * WaitApplied is the number of resources that are waiting to be applied.
             */
            waitApplied: number;
        }

        /**
         * ResourceCounts contains the number of resources in each state over
         * all bundles in the cluster group.
         */
        export interface ClusterGroupStatusResourceCountsPatch {
            /**
             * DesiredReady is the number of resources that should be ready.
             */
            desiredReady: number;
            /**
             * Missing is the number of missing resources.
             */
            missing: number;
            /**
             * Modified is the number of resources that have been modified.
             */
            modified: number;
            /**
             * NotReady is the number of not ready resources. Resources are not
             * ready if they do not match any other state.
             */
            notReady: number;
            /**
             * Orphaned is the number of orphaned resources.
             */
            orphaned: number;
            /**
             * Ready is the number of ready resources.
             */
            ready: number;
            /**
             * Unknown is the number of resources in an unknown state.
             */
            unknown: number;
            /**
             * WaitApplied is the number of resources that are waiting to be applied.
             */
            waitApplied: number;
        }

        /**
         * Summary is a summary of the bundle deployments and their resources
         * in the cluster group.
         */
        export interface ClusterGroupStatusSummary {
            /**
             * DesiredReady is the number of bundle deployments that should be
             * ready.
             */
            desiredReady: number;
            /**
             * ErrApplied is the number of bundle deployments that have been synced
             * from the Fleet controller and the downstream cluster, but with some
             * errors when deploying the bundle.
             */
            errApplied: number;
            /**
             * Modified is the number of bundle deployments that have been deployed
             * and for which all resources are ready, but where some changes from the
             * Git repository have not yet been synced.
             */
            modified: number;
            /**
             * NonReadyClusters is a list of states, which is filled for a bundle
             * that is not ready.
             */
            nonReadyResources: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResources[];
            /**
             * NotReady is the number of bundle deployments that have been deployed
             * where some resources are not ready.
             */
            notReady: number;
            /**
             * OutOfSync is the number of bundle deployments that have been synced
             * from Fleet controller, but not yet by the downstream agent.
             */
            outOfSync: number;
            /**
             * Pending is the number of bundle deployments that are being processed
             * by Fleet controller.
             */
            pending: number;
            /**
             * Ready is the number of bundle deployments that have been deployed
             * where all resources are ready.
             */
            ready: number;
            /**
             * WaitApplied is the number of bundle deployments that have been
             * synced from Fleet controller and downstream cluster, but are waiting
             * to be deployed.
             */
            waitApplied: number;
        }

        /**
         * NonReadyResource contains information about a bundle that is not ready for a
         * given state like "ErrApplied". It contains a list of non-ready or modified
         * resources and their states.
         */
        export interface ClusterGroupStatusSummaryNonReadyResources {
            /**
             * State is the state of the resource, like e.g. "NotReady" or "ErrApplied".
             */
            bundleState: string;
            /**
             * Message contains information why the bundle is not ready.
             */
            message: string;
            /**
             * ModifiedStatus lists the state for each modified resource.
             */
            modifiedStatus: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesModifiedStatus[];
            /**
             * Name is the name of the resource.
             */
            name: string;
            /**
             * NonReadyStatus lists the state for each non-ready resource.
             */
            nonReadyStatus: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatus[];
        }

        /**
         * ModifiedStatus is used to report the status of a resource that is modified.
         * It indicates if the modification was a create, a delete or a patch.
         */
        export interface ClusterGroupStatusSummaryNonReadyResourcesModifiedStatus {
            apiVersion: string;
            delete: boolean;
            /**
             * Exist is true if the resource exists but is not owned by us. This can happen if a resource was adopted by another bundle whereas the first bundle still exists and due to that reports that it does not own it.
             */
            exist: boolean;
            kind: string;
            missing: boolean;
            name: string;
            namespace: string;
            patch: string;
        }

        /**
         * ModifiedStatus is used to report the status of a resource that is modified.
         * It indicates if the modification was a create, a delete or a patch.
         */
        export interface ClusterGroupStatusSummaryNonReadyResourcesModifiedStatusPatch {
            apiVersion: string;
            delete: boolean;
            /**
             * Exist is true if the resource exists but is not owned by us. This can happen if a resource was adopted by another bundle whereas the first bundle still exists and due to that reports that it does not own it.
             */
            exist: boolean;
            kind: string;
            missing: boolean;
            name: string;
            namespace: string;
            patch: string;
        }

        /**
         * NonReadyStatus is used to report the status of a resource that is not ready. It includes a summary.
         */
        export interface ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatus {
            apiVersion: string;
            kind: string;
            name: string;
            namespace: string;
            summary: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatusSummary;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * NonReadyStatus is used to report the status of a resource that is not ready. It includes a summary.
         */
        export interface ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatusPatch {
            apiVersion: string;
            kind: string;
            name: string;
            namespace: string;
            summary: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatusSummaryPatch;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        export interface ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatusSummary {
            error: boolean;
            message: string[];
            state: string;
            transitioning: boolean;
        }

        export interface ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatusSummaryPatch {
            error: boolean;
            message: string[];
            state: string;
            transitioning: boolean;
        }

        /**
         * NonReadyResource contains information about a bundle that is not ready for a
         * given state like "ErrApplied". It contains a list of non-ready or modified
         * resources and their states.
         */
        export interface ClusterGroupStatusSummaryNonReadyResourcesPatch {
            /**
             * State is the state of the resource, like e.g. "NotReady" or "ErrApplied".
             */
            bundleState: string;
            /**
             * Message contains information why the bundle is not ready.
             */
            message: string;
            /**
             * ModifiedStatus lists the state for each modified resource.
             */
            modifiedStatus: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesModifiedStatusPatch[];
            /**
             * Name is the name of the resource.
             */
            name: string;
            /**
             * NonReadyStatus lists the state for each non-ready resource.
             */
            nonReadyStatus: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesNonReadyStatusPatch[];
        }

        /**
         * Summary is a summary of the bundle deployments and their resources
         * in the cluster group.
         */
        export interface ClusterGroupStatusSummaryPatch {
            /**
             * DesiredReady is the number of bundle deployments that should be
             * ready.
             */
            desiredReady: number;
            /**
             * ErrApplied is the number of bundle deployments that have been synced
             * from the Fleet controller and the downstream cluster, but with some
             * errors when deploying the bundle.
             */
            errApplied: number;
            /**
             * Modified is the number of bundle deployments that have been deployed
             * and for which all resources are ready, but where some changes from the
             * Git repository have not yet been synced.
             */
            modified: number;
            /**
             * NonReadyClusters is a list of states, which is filled for a bundle
             * that is not ready.
             */
            nonReadyResources: outputs.fleet.v1alpha1.ClusterGroupStatusSummaryNonReadyResourcesPatch[];
            /**
             * NotReady is the number of bundle deployments that have been deployed
             * where some resources are not ready.
             */
            notReady: number;
            /**
             * OutOfSync is the number of bundle deployments that have been synced
             * from Fleet controller, but not yet by the downstream agent.
             */
            outOfSync: number;
            /**
             * Pending is the number of bundle deployments that are being processed
             * by Fleet controller.
             */
            pending: number;
            /**
             * Ready is the number of bundle deployments that have been deployed
             * where all resources are ready.
             */
            ready: number;
            /**
             * WaitApplied is the number of bundle deployments that have been
             * synced from Fleet controller and downstream cluster, but are waiting
             * to be deployed.
             */
            waitApplied: number;
        }

        /**
         * GitRepo describes a git repository that is watched by Fleet.
         * The resource contains the necessary information to deploy the repo, or parts
         * of it, to target clusters.
         */
        export interface GitRepo {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "fleet.cattle.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "GitRepo";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.fleet.v1alpha1.GitRepoSpec;
            status: outputs.fleet.v1alpha1.GitRepoStatus;
        }

        export interface GitRepoSpec {
            /**
             * Branch The git branch to follow.
             */
            branch: string;
            /**
             * Bundles defines the paths of bundles to be read.
             * This drives the fleet resource scanner that simply loads the specified folders
             */
            bundles: outputs.fleet.v1alpha1.GitRepoSpecBundles[];
            /**
             * CABundle is a PEM encoded CA bundle which will be used to validate the repo's certificate.
             */
            caBundle: string;
            /**
             * ClientSecretName is the name of the client secret to be used to connect to the repo
             * It is expected the secret be of type "kubernetes.io/basic-auth" or "kubernetes.io/ssh-auth".
             */
            clientSecretName: string;
            correctDrift: outputs.fleet.v1alpha1.GitRepoSpecCorrectDrift;
            /**
             * DeleteNamespace specifies if the namespace created must be deleted after deleting the GitRepo.
             */
            deleteNamespace: boolean;
            /**
             * Disables git polling. When enabled only webhooks will be used.
             */
            disablePolling: boolean;
            /**
             * Increment this number to force a redeployment of contents from Git.
             */
            forceSyncGeneration: number;
            /**
             * HelmRepoURLRegex Helm credentials will be used if the helm repo matches this regex
             * Credentials will always be used if this is empty or not provided.
             */
            helmRepoURLRegex: string;
            /**
             * HelmSecretName contains the auth secret for a private Helm repository.
             */
            helmSecretName: string;
            /**
             * HelmSecretNameForPaths contains the auth secret for private Helm repository for each path.
             */
            helmSecretNameForPaths: string;
            imageScanCommit: outputs.fleet.v1alpha1.GitRepoSpecImageScanCommit;
            /**
             * ImageScanInterval is the interval of syncing scanned images and writing back to git repo.
             */
            imageScanInterval: string;
            /**
             * InsecureSkipTLSverify will use insecure HTTPS to clone the repo.
             */
            insecureSkipTLSVerify: boolean;
            /**
             * KeepResources specifies if the resources created must be kept after deleting the GitRepo.
             */
            keepResources: boolean;
            /**
             * OCIRegistrySecret contains the name of the secret to be used for retrieving the OCI registry connection details.
             */
            ociRegistrySecret: string;
            /**
             * Paths is the directories relative to the git repo root that contain resources to be applied.
             * Path globbing is supported, for example ["charts/*"] will match all folders as a subdirectory of charts/
             * If empty, "/" is the default.
             */
            paths: string[];
            /**
             * Paused, when true, causes changes in Git not to be propagated down to the clusters but instead to mark
             * resources as OutOfSync.
             */
            paused: boolean;
            /**
             * PollingInterval is how often to check git for new updates.
             */
            pollingInterval: string;
            /**
             * Repo is a URL to a git repo to clone and index.
             */
            repo: string;
            /**
             * Revision A specific commit or tag to operate on.
             */
            revision: string;
            /**
             * ServiceAccount used in the downstream cluster for deployment.
             */
            serviceAccount: string;
            /**
             * Ensure that all resources are created in this namespace
             * Any cluster scoped resource will be rejected if this is set
             * Additionally this namespace will be created on demand.
             */
            targetNamespace: string;
            /**
             * Targets is a list of targets this repo will deploy to.
             */
            targets: outputs.fleet.v1alpha1.GitRepoSpecTargets[];
            /**
             * WebhookSecret contains the name of the secret to use for webhook parsing
             */
            webhookSecret: string;
        }

        export interface GitRepoSpecBundles {
            /**
             * Base is the base path for the bundle resources
             */
            base: string;
            /**
             * Options is the path (relative to path above) that defines a fleet.yaml file to configure the bundle
             */
            options: string;
        }

        export interface GitRepoSpecBundlesPatch {
            /**
             * Base is the base path for the bundle resources
             */
            base: string;
            /**
             * Options is the path (relative to path above) that defines a fleet.yaml file to configure the bundle
             */
            options: string;
        }

        /**
         * CorrectDrift specifies how drift correction should work.
         */
        export interface GitRepoSpecCorrectDrift {
            /**
             * Enabled correct drift if true.
             */
            enabled: boolean;
            /**
             * Force helm rollback with --force option will be used if true. This will try to recreate all resources in the release.
             */
            force: boolean;
            /**
             * KeepFailHistory keeps track of failed rollbacks in the helm history.
             */
            keepFailHistory: boolean;
        }

        /**
         * CorrectDrift specifies how drift correction should work.
         */
        export interface GitRepoSpecCorrectDriftPatch {
            /**
             * Enabled correct drift if true.
             */
            enabled: boolean;
            /**
             * Force helm rollback with --force option will be used if true. This will try to recreate all resources in the release.
             */
            force: boolean;
            /**
             * KeepFailHistory keeps track of failed rollbacks in the helm history.
             */
            keepFailHistory: boolean;
        }

        /**
         * Commit specifies how to commit to the git repo when a new image is scanned and written back to git repo.
         */
        export interface GitRepoSpecImageScanCommit {
            /**
             * AuthorEmail gives the email to provide when making a commit
             */
            authorEmail: string;
            /**
             * AuthorName gives the name to provide when making a commit
             */
            authorName: string;
            /**
             * MessageTemplate provides a template for the commit message,
             * into which will be interpolated the details of the change made.
             */
            messageTemplate: string;
        }

        /**
         * Commit specifies how to commit to the git repo when a new image is scanned and written back to git repo.
         */
        export interface GitRepoSpecImageScanCommitPatch {
            /**
             * AuthorEmail gives the email to provide when making a commit
             */
            authorEmail: string;
            /**
             * AuthorName gives the name to provide when making a commit
             */
            authorName: string;
            /**
             * MessageTemplate provides a template for the commit message,
             * into which will be interpolated the details of the change made.
             */
            messageTemplate: string;
        }

        export interface GitRepoSpecPatch {
            /**
             * Branch The git branch to follow.
             */
            branch: string;
            /**
             * Bundles defines the paths of bundles to be read.
             * This drives the fleet resource scanner that simply loads the specified folders
             */
            bundles: outputs.fleet.v1alpha1.GitRepoSpecBundlesPatch[];
            /**
             * CABundle is a PEM encoded CA bundle which will be used to validate the repo's certificate.
             */
            caBundle: string;
            /**
             * ClientSecretName is the name of the client secret to be used to connect to the repo
             * It is expected the secret be of type "kubernetes.io/basic-auth" or "kubernetes.io/ssh-auth".
             */
            clientSecretName: string;
            correctDrift: outputs.fleet.v1alpha1.GitRepoSpecCorrectDriftPatch;
            /**
             * DeleteNamespace specifies if the namespace created must be deleted after deleting the GitRepo.
             */
            deleteNamespace: boolean;
            /**
             * Disables git polling. When enabled only webhooks will be used.
             */
            disablePolling: boolean;
            /**
             * Increment this number to force a redeployment of contents from Git.
             */
            forceSyncGeneration: number;
            /**
             * HelmRepoURLRegex Helm credentials will be used if the helm repo matches this regex
             * Credentials will always be used if this is empty or not provided.
             */
            helmRepoURLRegex: string;
            /**
             * HelmSecretName contains the auth secret for a private Helm repository.
             */
            helmSecretName: string;
            /**
             * HelmSecretNameForPaths contains the auth secret for private Helm repository for each path.
             */
            helmSecretNameForPaths: string;
            imageScanCommit: outputs.fleet.v1alpha1.GitRepoSpecImageScanCommitPatch;
            /**
             * ImageScanInterval is the interval of syncing scanned images and writing back to git repo.
             */
            imageScanInterval: string;
            /**
             * InsecureSkipTLSverify will use insecure HTTPS to clone the repo.
             */
            insecureSkipTLSVerify: boolean;
            /**
             * KeepResources specifies if the resources created must be kept after deleting the GitRepo.
             */
            keepResources: boolean;
            /**
             * OCIRegistrySecret contains the name of the secret to be used for retrieving the OCI registry connection details.
             */
            ociRegistrySecret: string;
            /**
             * Paths is the directories relative to the git repo root that contain resources to be applied.
             * Path globbing is supported, for example ["charts/*"] will match all folders as a subdirectory of charts/
             * If empty, "/" is the default.
             */
            paths: string[];
            /**
             * Paused, when true, causes changes in Git not to be propagated down to the clusters but instead to mark
             * resources as OutOfSync.
             */
            paused: boolean;
            /**
             * PollingInterval is how often to check git for new updates.
             */
            pollingInterval: string;
            /**
             * Repo is a URL to a git repo to clone and index.
             */
            repo: string;
            /**
             * Revision A specific commit or tag to operate on.
             */
            revision: string;
            /**
             * ServiceAccount used in the downstream cluster for deployment.
             */
            serviceAccount: string;
            /**
             * Ensure that all resources are created in this namespace
             * Any cluster scoped resource will be rejected if this is set
             * Additionally this namespace will be created on demand.
             */
            targetNamespace: string;
            /**
             * Targets is a list of targets this repo will deploy to.
             */
            targets: outputs.fleet.v1alpha1.GitRepoSpecTargetsPatch[];
            /**
             * WebhookSecret contains the name of the secret to use for webhook parsing
             */
            webhookSecret: string;
        }

        /**
         * GitTarget is a cluster or cluster group to deploy to.
         */
        export interface GitRepoSpecTargets {
            /**
             * ClusterGroup is the name of a cluster group in the same namespace as the clusters.
             */
            clusterGroup: string;
            clusterGroupSelector: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterGroupSelector;
            /**
             * ClusterName is the name of a cluster.
             */
            clusterName: string;
            clusterSelector: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterSelector;
            /**
             * Name is the name of this target.
             */
            name: string;
        }

        /**
         * ClusterGroupSelector is a label selector to select cluster groups.
         */
        export interface GitRepoSpecTargetsClusterGroupSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterGroupSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GitRepoSpecTargetsClusterGroupSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GitRepoSpecTargetsClusterGroupSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * ClusterGroupSelector is a label selector to select cluster groups.
         */
        export interface GitRepoSpecTargetsClusterGroupSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterGroupSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * ClusterSelector is a label selector to select clusters.
         */
        export interface GitRepoSpecTargetsClusterSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GitRepoSpecTargetsClusterSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GitRepoSpecTargetsClusterSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * ClusterSelector is a label selector to select clusters.
         */
        export interface GitRepoSpecTargetsClusterSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * GitTarget is a cluster or cluster group to deploy to.
         */
        export interface GitRepoSpecTargetsPatch {
            /**
             * ClusterGroup is the name of a cluster group in the same namespace as the clusters.
             */
            clusterGroup: string;
            clusterGroupSelector: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterGroupSelectorPatch;
            /**
             * ClusterName is the name of a cluster.
             */
            clusterName: string;
            clusterSelector: outputs.fleet.v1alpha1.GitRepoSpecTargetsClusterSelectorPatch;
            /**
             * Name is the name of this target.
             */
            name: string;
        }

        export interface GitRepoStatus {
            /**
             * Commit is the Git commit hash from the last git job run.
             */
            commit: string;
            /**
             * Conditions is a list of Wrangler conditions that describe the state
             * of the resource.
             */
            conditions: outputs.fleet.v1alpha1.GitRepoStatusConditions[];
            /**
             * DesiredReadyClusters	is the number of clusters that should be ready for bundles of this resource.
             */
            desiredReadyClusters: number;
            display: outputs.fleet.v1alpha1.GitRepoStatusDisplay;
            /**
             * GitJobStatus is the status of the last Git job run, e.g. "Current" if there was no error.
             */
            gitJobStatus: string;
            /**
             * LastPollingTime is the last time the polling check was triggered
             */
            lastPollingTriggered: string;
            /**
             * LastSyncedImageScanTime is the time of the last image scan.
             */
            lastSyncedImageScanTime: string;
            /**
             * ObservedGeneration is the current generation of the resource in the cluster. It is copied from k8s
             * metadata.Generation. The value is incremented for all changes, except for changes to .metadata or .status.
             */
            observedGeneration: number;
            /**
             * PerClusterResourceCounts contains the number of resources in each state over all bundles, per cluster.
             */
            perClusterResourceCounts: {[key: string]: {[key: string]: string}};
            /**
             * ReadyClusters is the lowest number of clusters that are ready over
             * all the bundles of this resource.
             */
            readyClusters: number;
            resourceCounts: outputs.fleet.v1alpha1.GitRepoStatusResourceCounts;
            /**
             * Resources contains metadata about the resources of each bundle.
             */
            resources: outputs.fleet.v1alpha1.GitRepoStatusResources[];
            summary: outputs.fleet.v1alpha1.GitRepoStatusSummary;
            /**
             * Update generation is the force update generation if spec.forceSyncGeneration is set
             */
            updateGeneration: number;
            /**
             * WebhookCommit is the latest Git commit hash received from a webhook
             */
            webhookCommit: string;
        }

        export interface GitRepoStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * Human-readable message indicating details about last transition
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of cluster condition.
             */
            type: string;
        }

        export interface GitRepoStatusConditionsPatch {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * Human-readable message indicating details about last transition
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of cluster condition.
             */
            type: string;
        }

        /**
         * Display contains a human readable summary of the status.
         */
        export interface GitRepoStatusDisplay {
            /**
             * Error is true if a message is present.
             */
            error: boolean;
            /**
             * Message contains the relevant message from the deployment conditions.
             */
            message: string;
            /**
             * ReadyBundleDeployments is a string in the form "%d/%d", that describes the
             * number of ready bundledeployments over the total number of bundledeployments.
             */
            readyBundleDeployments: string;
            /**
             * State is the state of the resource, e.g. "GitUpdating" or the maximal
             * BundleState according to StateRank.
             */
            state: string;
        }

        /**
         * Display contains a human readable summary of the status.
         */
        export interface GitRepoStatusDisplayPatch {
            /**
             * Error is true if a message is present.
             */
            error: boolean;
            /**
             * Message contains the relevant message from the deployment conditions.
             */
            message: string;
            /**
             * ReadyBundleDeployments is a string in the form "%d/%d", that describes the
             * number of ready bundledeployments over the total number of bundledeployments.
             */
            readyBundleDeployments: string;
            /**
             * State is the state of the resource, e.g. "GitUpdating" or the maximal
             * BundleState according to StateRank.
             */
            state: string;
        }

        export interface GitRepoStatusPatch {
            /**
             * Commit is the Git commit hash from the last git job run.
             */
            commit: string;
            /**
             * Conditions is a list of Wrangler conditions that describe the state
             * of the resource.
             */
            conditions: outputs.fleet.v1alpha1.GitRepoStatusConditionsPatch[];
            /**
             * DesiredReadyClusters	is the number of clusters that should be ready for bundles of this resource.
             */
            desiredReadyClusters: number;
            display: outputs.fleet.v1alpha1.GitRepoStatusDisplayPatch;
            /**
             * GitJobStatus is the status of the last Git job run, e.g. "Current" if there was no error.
             */
            gitJobStatus: string;
            /**
             * LastPollingTime is the last time the polling check was triggered
             */
            lastPollingTriggered: string;
            /**
             * LastSyncedImageScanTime is the time of the last image scan.
             */
            lastSyncedImageScanTime: string;
            /**
             * ObservedGeneration is the current generation of the resource in the cluster. It is copied from k8s
             * metadata.Generation. The value is incremented for all changes, except for changes to .metadata or .status.
             */
            observedGeneration: number;
            /**
             * PerClusterResourceCounts contains the number of resources in each state over all bundles, per cluster.
             */
            perClusterResourceCounts: {[key: string]: {[key: string]: string}};
            /**
             * ReadyClusters is the lowest number of clusters that are ready over
             * all the bundles of this resource.
             */
            readyClusters: number;
            resourceCounts: outputs.fleet.v1alpha1.GitRepoStatusResourceCountsPatch;
            /**
             * Resources contains metadata about the resources of each bundle.
             */
            resources: outputs.fleet.v1alpha1.GitRepoStatusResourcesPatch[];
            summary: outputs.fleet.v1alpha1.GitRepoStatusSummaryPatch;
            /**
             * Update generation is the force update generation if spec.forceSyncGeneration is set
             */
            updateGeneration: number;
            /**
             * WebhookCommit is the latest Git commit hash received from a webhook
             */
            webhookCommit: string;
        }

        /**
         * ResourceCounts contains the number of resources in each state over all bundles.
         */
        export interface GitRepoStatusResourceCounts {
            /**
             * DesiredReady is the number of resources that should be ready.
             */
            desiredReady: number;
            /**
             * Missing is the number of missing resources.
             */
            missing: number;
            /**
             * Modified is the number of resources that have been modified.
             */
            modified: number;
            /**
             * NotReady is the number of not ready resources. Resources are not
             * ready if they do not match any other state.
             */
            notReady: number;
            /**
             * Orphaned is the number of orphaned resources.
             */
            orphaned: number;
            /**
             * Ready is the number of ready resources.
             */
            ready: number;
            /**
             * Unknown is the number of resources in an unknown state.
             */
            unknown: number;
            /**
             * WaitApplied is the number of resources that are waiting to be applied.
             */
            waitApplied: number;
        }

        /**
         * ResourceCounts contains the number of resources in each state over all bundles.
         */
        export interface GitRepoStatusResourceCountsPatch {
            /**
             * DesiredReady is the number of resources that should be ready.
             */
            desiredReady: number;
            /**
             * Missing is the number of missing resources.
             */
            missing: number;
            /**
             * Modified is the number of resources that have been modified.
             */
            modified: number;
            /**
             * NotReady is the number of not ready resources. Resources are not
             * ready if they do not match any other state.
             */
            notReady: number;
            /**
             * Orphaned is the number of orphaned resources.
             */
            orphaned: number;
            /**
             * Ready is the number of ready resources.
             */
            ready: number;
            /**
             * Unknown is the number of resources in an unknown state.
             */
            unknown: number;
            /**
             * WaitApplied is the number of resources that are waiting to be applied.
             */
            waitApplied: number;
        }

        /**
         * Resource contains metadata about the resources of a bundle.
         */
        export interface GitRepoStatusResources {
            /**
             * APIVersion is the API version of the resource.
             */
            apiVersion: string;
            /**
             * Error is true if any Error in the PerClusterState is true.
             */
            error: boolean;
            /**
             * ID is the name of the resource, e.g. "namespace1/my-config" or "backingimagemanagers.storage.io".
             */
            id: string;
            /**
             * IncompleteState is true if a bundle summary has 10 or more non-ready
             * resources or a non-ready resource has more 10 or more non-ready or
             * modified states.
             */
            incompleteState: boolean;
            /**
             * Kind is the k8s kind of the resource.
             */
            kind: string;
            /**
             * Message is the first message from the PerClusterStates.
             */
            message: string;
            /**
             * Name of the resource.
             */
            name: string;
            /**
             * Namespace of the resource.
             */
            namespace: string;
            perClusterState: outputs.fleet.v1alpha1.GitRepoStatusResourcesPerClusterState;
            /**
             * State is the state of the resource, e.g. "Unknown", "WaitApplied", "ErrApplied" or "Ready".
             */
            state: string;
            /**
             * Transitioning is true if any Transitioning in the PerClusterState is true.
             */
            transitioning: boolean;
            /**
             * Type is the type of the resource, e.g. "apiextensions.k8s.io.customresourcedefinition" or "configmap".
             */
            type: string;
        }

        /**
         * Resource contains metadata about the resources of a bundle.
         */
        export interface GitRepoStatusResourcesPatch {
            /**
             * APIVersion is the API version of the resource.
             */
            apiVersion: string;
            /**
             * Error is true if any Error in the PerClusterState is true.
             */
            error: boolean;
            /**
             * ID is the name of the resource, e.g. "namespace1/my-config" or "backingimagemanagers.storage.io".
             */
            id: string;
            /**
             * IncompleteState is true if a bundle summary has 10 or more non-ready
             * resources or a non-ready resource has more 10 or more non-ready or
             * modified states.
             */
            incompleteState: boolean;
            /**
             * Kind is the k8s kind of the resource.
             */
            kind: string;
            /**
             * Message is the first message from the PerClusterStates.
             */
            message: string;
            /**
             * Name of the resource.
             */
            name: string;
            /**
             * Namespace of the resource.
             */
            namespace: string;
            perClusterState: outputs.fleet.v1alpha1.GitRepoStatusResourcesPerClusterStatePatch;
            /**
             * State is the state of the resource, e.g. "Unknown", "WaitApplied", "ErrApplied" or "Ready".
             */
            state: string;
            /**
             * Transitioning is true if any Transitioning in the PerClusterState is true.
             */
            transitioning: boolean;
            /**
             * Type is the type of the resource, e.g. "apiextensions.k8s.io.customresourcedefinition" or "configmap".
             */
            type: string;
        }

        /**
         * PerClusterState contains lists of cluster IDs for every State for this resource
         */
        export interface GitRepoStatusResourcesPerClusterState {
            /**
             * Missing is a list of cluster IDs for which this a resource is in Missing state
             */
            missing: string[];
            /**
             * Modified is a list of cluster IDs for which this a resource is in Modified state
             */
            modified: string[];
            /**
             * NotReady is a list of cluster IDs for which this a resource is in NotReady state
             */
            notReady: string[];
            /**
             * Orphaned is a list of cluster IDs for which this a resource is in Orphaned state
             */
            orphaned: string[];
            /**
             * Pending is a list of cluster IDs for which this a resource is in Pending state
             */
            pending: string[];
            /**
             * Ready is a list of cluster IDs for which this a resource is in Ready state
             */
            ready: string[];
            /**
             * Unknown is a list of cluster IDs for which this a resource is in Unknown state
             */
            unknown: string[];
            /**
             * WaitApplied is a list of cluster IDs for which this a resource is in WaitApplied state
             */
            waitApplied: string[];
        }

        /**
         * PerClusterState contains lists of cluster IDs for every State for this resource
         */
        export interface GitRepoStatusResourcesPerClusterStatePatch {
            /**
             * Missing is a list of cluster IDs for which this a resource is in Missing state
             */
            missing: string[];
            /**
             * Modified is a list of cluster IDs for which this a resource is in Modified state
             */
            modified: string[];
            /**
             * NotReady is a list of cluster IDs for which this a resource is in NotReady state
             */
            notReady: string[];
            /**
             * Orphaned is a list of cluster IDs for which this a resource is in Orphaned state
             */
            orphaned: string[];
            /**
             * Pending is a list of cluster IDs for which this a resource is in Pending state
             */
            pending: string[];
            /**
             * Ready is a list of cluster IDs for which this a resource is in Ready state
             */
            ready: string[];
            /**
             * Unknown is a list of cluster IDs for which this a resource is in Unknown state
             */
            unknown: string[];
            /**
             * WaitApplied is a list of cluster IDs for which this a resource is in WaitApplied state
             */
            waitApplied: string[];
        }

        /**
         * Summary contains the number of bundle deployments in each state and a list of non-ready resources.
         */
        export interface GitRepoStatusSummary {
            /**
             * DesiredReady is the number of bundle deployments that should be
             * ready.
             */
            desiredReady: number;
            /**
             * ErrApplied is the number of bundle deployments that have been synced
             * from the Fleet controller and the downstream cluster, but with some
             * errors when deploying the bundle.
             */
            errApplied: number;
            /**
             * Modified is the number of bundle deployments that have been deployed
             * and for which all resources are ready, but where some changes from the
             * Git repository have not yet been synced.
             */
            modified: number;
            /**
             * NonReadyClusters is a list of states, which is filled for a bundle
             * that is not ready.
             */
            nonReadyResources: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResources[];
            /**
             * NotReady is the number of bundle deployments that have been deployed
             * where some resources are not ready.
             */
            notReady: number;
            /**
             * OutOfSync is the number of bundle deployments that have been synced
             * from Fleet controller, but not yet by the downstream agent.
             */
            outOfSync: number;
            /**
             * Pending is the number of bundle deployments that are being processed
             * by Fleet controller.
             */
            pending: number;
            /**
             * Ready is the number of bundle deployments that have been deployed
             * where all resources are ready.
             */
            ready: number;
            /**
             * WaitApplied is the number of bundle deployments that have been
             * synced from Fleet controller and downstream cluster, but are waiting
             * to be deployed.
             */
            waitApplied: number;
        }

        /**
         * NonReadyResource contains information about a bundle that is not ready for a
         * given state like "ErrApplied". It contains a list of non-ready or modified
         * resources and their states.
         */
        export interface GitRepoStatusSummaryNonReadyResources {
            /**
             * State is the state of the resource, like e.g. "NotReady" or "ErrApplied".
             */
            bundleState: string;
            /**
             * Message contains information why the bundle is not ready.
             */
            message: string;
            /**
             * ModifiedStatus lists the state for each modified resource.
             */
            modifiedStatus: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesModifiedStatus[];
            /**
             * Name is the name of the resource.
             */
            name: string;
            /**
             * NonReadyStatus lists the state for each non-ready resource.
             */
            nonReadyStatus: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesNonReadyStatus[];
        }

        /**
         * ModifiedStatus is used to report the status of a resource that is modified.
         * It indicates if the modification was a create, a delete or a patch.
         */
        export interface GitRepoStatusSummaryNonReadyResourcesModifiedStatus {
            apiVersion: string;
            delete: boolean;
            /**
             * Exist is true if the resource exists but is not owned by us. This can happen if a resource was adopted by another bundle whereas the first bundle still exists and due to that reports that it does not own it.
             */
            exist: boolean;
            kind: string;
            missing: boolean;
            name: string;
            namespace: string;
            patch: string;
        }

        /**
         * ModifiedStatus is used to report the status of a resource that is modified.
         * It indicates if the modification was a create, a delete or a patch.
         */
        export interface GitRepoStatusSummaryNonReadyResourcesModifiedStatusPatch {
            apiVersion: string;
            delete: boolean;
            /**
             * Exist is true if the resource exists but is not owned by us. This can happen if a resource was adopted by another bundle whereas the first bundle still exists and due to that reports that it does not own it.
             */
            exist: boolean;
            kind: string;
            missing: boolean;
            name: string;
            namespace: string;
            patch: string;
        }

        /**
         * NonReadyStatus is used to report the status of a resource that is not ready. It includes a summary.
         */
        export interface GitRepoStatusSummaryNonReadyResourcesNonReadyStatus {
            apiVersion: string;
            kind: string;
            name: string;
            namespace: string;
            summary: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesNonReadyStatusSummary;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * NonReadyStatus is used to report the status of a resource that is not ready. It includes a summary.
         */
        export interface GitRepoStatusSummaryNonReadyResourcesNonReadyStatusPatch {
            apiVersion: string;
            kind: string;
            name: string;
            namespace: string;
            summary: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesNonReadyStatusSummaryPatch;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        export interface GitRepoStatusSummaryNonReadyResourcesNonReadyStatusSummary {
            error: boolean;
            message: string[];
            state: string;
            transitioning: boolean;
        }

        export interface GitRepoStatusSummaryNonReadyResourcesNonReadyStatusSummaryPatch {
            error: boolean;
            message: string[];
            state: string;
            transitioning: boolean;
        }

        /**
         * NonReadyResource contains information about a bundle that is not ready for a
         * given state like "ErrApplied". It contains a list of non-ready or modified
         * resources and their states.
         */
        export interface GitRepoStatusSummaryNonReadyResourcesPatch {
            /**
             * State is the state of the resource, like e.g. "NotReady" or "ErrApplied".
             */
            bundleState: string;
            /**
             * Message contains information why the bundle is not ready.
             */
            message: string;
            /**
             * ModifiedStatus lists the state for each modified resource.
             */
            modifiedStatus: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesModifiedStatusPatch[];
            /**
             * Name is the name of the resource.
             */
            name: string;
            /**
             * NonReadyStatus lists the state for each non-ready resource.
             */
            nonReadyStatus: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesNonReadyStatusPatch[];
        }

        /**
         * Summary contains the number of bundle deployments in each state and a list of non-ready resources.
         */
        export interface GitRepoStatusSummaryPatch {
            /**
             * DesiredReady is the number of bundle deployments that should be
             * ready.
             */
            desiredReady: number;
            /**
             * ErrApplied is the number of bundle deployments that have been synced
             * from the Fleet controller and the downstream cluster, but with some
             * errors when deploying the bundle.
             */
            errApplied: number;
            /**
             * Modified is the number of bundle deployments that have been deployed
             * and for which all resources are ready, but where some changes from the
             * Git repository have not yet been synced.
             */
            modified: number;
            /**
             * NonReadyClusters is a list of states, which is filled for a bundle
             * that is not ready.
             */
            nonReadyResources: outputs.fleet.v1alpha1.GitRepoStatusSummaryNonReadyResourcesPatch[];
            /**
             * NotReady is the number of bundle deployments that have been deployed
             * where some resources are not ready.
             */
            notReady: number;
            /**
             * OutOfSync is the number of bundle deployments that have been synced
             * from Fleet controller, but not yet by the downstream agent.
             */
            outOfSync: number;
            /**
             * Pending is the number of bundle deployments that are being processed
             * by Fleet controller.
             */
            pending: number;
            /**
             * Ready is the number of bundle deployments that have been deployed
             * where all resources are ready.
             */
            ready: number;
            /**
             * WaitApplied is the number of bundle deployments that have been
             * synced from Fleet controller and downstream cluster, but are waiting
             * to be deployed.
             */
            waitApplied: number;
        }

    }
}

export namespace management {
    export namespace v3 {
        export interface Cluster {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "management.cattle.io/v3";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Cluster";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.management.v3.ClusterSpec;
            status: outputs.management.v3.ClusterStatus;
        }

        export interface ClusterSpec {
            displayName: string;
            fleetWorkspaceName: string;
        }

        export interface ClusterSpecPatch {
            displayName: string;
            fleetWorkspaceName: string;
        }

        export interface ClusterStatus {
            conditions: outputs.management.v3.ClusterStatusConditions[];
        }

        export interface ClusterStatusConditions {
            lastTransitionTime: string;
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface ClusterStatusConditionsPatch {
            lastTransitionTime: string;
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface ClusterStatusPatch {
            conditions: outputs.management.v3.ClusterStatusConditionsPatch[];
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntry[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReference[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntryPatch[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReferencePatch[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

    }
}

export namespace provisioning {
    export namespace v1 {
        export interface Cluster {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "provisioning.cattle.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Cluster";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.provisioning.v1.ClusterSpec;
            status: outputs.provisioning.v1.ClusterStatus;
        }

        export interface ClusterSpec {
            agentEnvVars: outputs.provisioning.v1.ClusterSpecAgentEnvVars[];
            cloudCredentialSecretName: string;
            clusterAPIConfig: outputs.provisioning.v1.ClusterSpecClusterAPIConfig;
            clusterAgentDeploymentCustomization: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomization;
            defaultClusterRoleForProjectMembers: string;
            defaultPodSecurityAdmissionConfigurationTemplateName: string;
            enableNetworkPolicy: boolean;
            fleetAgentDeploymentCustomization: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomization;
            kubernetesVersion: string;
            localClusterAuthEndpoint: outputs.provisioning.v1.ClusterSpecLocalClusterAuthEndpoint;
            redeploySystemAgentGeneration: number;
            rkeConfig: outputs.provisioning.v1.ClusterSpecRkeConfig;
        }

        export interface ClusterSpecAgentEnvVars {
            name: string;
            value: string;
        }

        export interface ClusterSpecAgentEnvVarsPatch {
            name: string;
            value: string;
        }

        export interface ClusterSpecClusterAPIConfig {
            clusterName: string;
        }

        export interface ClusterSpecClusterAPIConfigPatch {
            clusterName: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomization {
            appendTolerations: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationAppendTolerations[];
            overrideAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinity;
            overrideResourceRequirements: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirements;
            schedulingCustomization: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomization;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationAppendTolerations {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationAppendTolerationsPatch {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinity {
            nodeAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinity;
            podAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinity;
            podAntiAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinity;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            weight: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            matchFields: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            matchFields: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPatch {
            nodeAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityNodeAffinityPatch;
            podAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPatch;
            podAntiAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPatch;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirements {
            claims: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirementsClaims[];
            limits: {[key: string]: string};
            requests: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirementsClaims {
            name: string;
            request: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirementsClaimsPatch {
            name: string;
            request: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirementsPatch {
            claims: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirementsClaimsPatch[];
            limits: {[key: string]: string};
            requests: {[key: string]: string};
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationPatch {
            appendTolerations: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationAppendTolerationsPatch[];
            overrideAffinity: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideAffinityPatch;
            overrideResourceRequirements: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationOverrideResourceRequirementsPatch;
            schedulingCustomization: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPatch;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomization {
            podDisruptionBudget: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget;
            priorityClass: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPatch {
            podDisruptionBudget: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetPatch;
            priorityClass: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClassPatch;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget {
            maxUnavailable: string;
            minAvailable: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetPatch {
            maxUnavailable: string;
            minAvailable: string;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass {
            preemptionPolicy: string;
            value: number;
        }

        export interface ClusterSpecClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClassPatch {
            preemptionPolicy: string;
            value: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomization {
            appendTolerations: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationAppendTolerations[];
            overrideAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinity;
            overrideResourceRequirements: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirements;
            schedulingCustomization: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomization;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationAppendTolerations {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationAppendTolerationsPatch {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinity {
            nodeAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinity;
            podAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinity;
            podAntiAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinity;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            weight: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            matchFields: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            matchFields: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPatch {
            nodeAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityNodeAffinityPatch;
            podAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPatch;
            podAntiAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPatch;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirements {
            claims: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirementsClaims[];
            limits: {[key: string]: string};
            requests: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirementsClaims {
            name: string;
            request: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirementsClaimsPatch {
            name: string;
            request: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirementsPatch {
            claims: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirementsClaimsPatch[];
            limits: {[key: string]: string};
            requests: {[key: string]: string};
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationPatch {
            appendTolerations: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationAppendTolerationsPatch[];
            overrideAffinity: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideAffinityPatch;
            overrideResourceRequirements: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationOverrideResourceRequirementsPatch;
            schedulingCustomization: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPatch;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomization {
            podDisruptionBudget: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget;
            priorityClass: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPriorityClass;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPatch {
            podDisruptionBudget: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetPatch;
            priorityClass: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPriorityClassPatch;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget {
            maxUnavailable: string;
            minAvailable: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetPatch {
            maxUnavailable: string;
            minAvailable: string;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPriorityClass {
            preemptionPolicy: string;
            value: number;
        }

        export interface ClusterSpecFleetAgentDeploymentCustomizationSchedulingCustomizationPriorityClassPatch {
            preemptionPolicy: string;
            value: number;
        }

        export interface ClusterSpecLocalClusterAuthEndpoint {
            caCerts: string;
            enabled: boolean;
            fqdn: string;
        }

        export interface ClusterSpecLocalClusterAuthEndpointPatch {
            caCerts: string;
            enabled: boolean;
            fqdn: string;
        }

        export interface ClusterSpecPatch {
            agentEnvVars: outputs.provisioning.v1.ClusterSpecAgentEnvVarsPatch[];
            cloudCredentialSecretName: string;
            clusterAPIConfig: outputs.provisioning.v1.ClusterSpecClusterAPIConfigPatch;
            clusterAgentDeploymentCustomization: outputs.provisioning.v1.ClusterSpecClusterAgentDeploymentCustomizationPatch;
            defaultClusterRoleForProjectMembers: string;
            defaultPodSecurityAdmissionConfigurationTemplateName: string;
            enableNetworkPolicy: boolean;
            fleetAgentDeploymentCustomization: outputs.provisioning.v1.ClusterSpecFleetAgentDeploymentCustomizationPatch;
            kubernetesVersion: string;
            localClusterAuthEndpoint: outputs.provisioning.v1.ClusterSpecLocalClusterAuthEndpointPatch;
            redeploySystemAgentGeneration: number;
            rkeConfig: outputs.provisioning.v1.ClusterSpecRkeConfigPatch;
        }

        export interface ClusterSpecRkeConfig {
            additionalManifest: string;
            chartValues: {[key: string]: any};
            dataDirectories: outputs.provisioning.v1.ClusterSpecRkeConfigDataDirectories;
            etcd: outputs.provisioning.v1.ClusterSpecRkeConfigEtcd;
            etcdSnapshotCreate: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdSnapshotCreate;
            etcdSnapshotRestore: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdSnapshotRestore;
            infrastructureRef: outputs.provisioning.v1.ClusterSpecRkeConfigInfrastructureRef;
            machineGlobalConfig: {[key: string]: any};
            machinePoolDefaults: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolDefaults;
            machinePools: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePools[];
            machineSelectorConfig: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorConfig[];
            machineSelectorFiles: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFiles[];
            networking: outputs.provisioning.v1.ClusterSpecRkeConfigNetworking;
            provisionGeneration: number;
            registries: outputs.provisioning.v1.ClusterSpecRkeConfigRegistries;
            rotateCertificates: outputs.provisioning.v1.ClusterSpecRkeConfigRotateCertificates;
            rotateEncryptionKeys: outputs.provisioning.v1.ClusterSpecRkeConfigRotateEncryptionKeys;
            upgradeStrategy: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategy;
        }

        export interface ClusterSpecRkeConfigDataDirectories {
            k8sDistro: string;
            provisioning: string;
            systemAgent: string;
        }

        export interface ClusterSpecRkeConfigDataDirectoriesPatch {
            k8sDistro: string;
            provisioning: string;
            systemAgent: string;
        }

        export interface ClusterSpecRkeConfigEtcd {
            disableSnapshots: boolean;
            s3: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdS3;
            snapshotRetention: number;
            snapshotScheduleCron: string;
        }

        export interface ClusterSpecRkeConfigEtcdPatch {
            disableSnapshots: boolean;
            s3: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdS3Patch;
            snapshotRetention: number;
            snapshotScheduleCron: string;
        }

        export interface ClusterSpecRkeConfigEtcdS3 {
            bucket: string;
            cloudCredentialName: string;
            endpoint: string;
            endpointCA: string;
            folder: string;
            region: string;
            skipSSLVerify: boolean;
        }

        export interface ClusterSpecRkeConfigEtcdS3Patch {
            bucket: string;
            cloudCredentialName: string;
            endpoint: string;
            endpointCA: string;
            folder: string;
            region: string;
            skipSSLVerify: boolean;
        }

        export interface ClusterSpecRkeConfigEtcdSnapshotCreate {
            generation: number;
        }

        export interface ClusterSpecRkeConfigEtcdSnapshotCreatePatch {
            generation: number;
        }

        export interface ClusterSpecRkeConfigEtcdSnapshotRestore {
            generation: number;
            name: string;
            restoreRKEConfig: string;
        }

        export interface ClusterSpecRkeConfigEtcdSnapshotRestorePatch {
            generation: number;
            name: string;
            restoreRKEConfig: string;
        }

        export interface ClusterSpecRkeConfigInfrastructureRef {
            apiVersion: string;
            fieldPath: string;
            kind: string;
            name: string;
            namespace: string;
            resourceVersion: string;
            uid: string;
        }

        export interface ClusterSpecRkeConfigInfrastructureRefPatch {
            apiVersion: string;
            fieldPath: string;
            kind: string;
            name: string;
            namespace: string;
            resourceVersion: string;
            uid: string;
        }

        export interface ClusterSpecRkeConfigMachinePoolDefaults {
            hostnameLengthLimit: number;
        }

        export interface ClusterSpecRkeConfigMachinePoolDefaultsPatch {
            hostnameLengthLimit: number;
        }

        export interface ClusterSpecRkeConfigMachinePools {
            cloudCredentialSecretName: string;
            controlPlaneRole: boolean;
            displayName: string;
            drainBeforeDelete: boolean;
            drainBeforeDeleteTimeout: string;
            dynamicSchemaSpec: string;
            etcdRole: boolean;
            hostnameLengthLimit: number;
            labels: {[key: string]: string};
            machineConfigRef: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsMachineConfigRef;
            machineDeploymentAnnotations: {[key: string]: string};
            machineDeploymentLabels: {[key: string]: string};
            machineOS: string;
            maxUnhealthy: string;
            name: string;
            nodeStartupTimeout: string;
            paused: boolean;
            quantity: number;
            rollingUpdate: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsRollingUpdate;
            taints: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsTaints[];
            unhealthyNodeTimeout: string;
            unhealthyRange: string;
            workerRole: boolean;
        }

        export interface ClusterSpecRkeConfigMachinePoolsMachineConfigRef {
            apiVersion: string;
            fieldPath: string;
            kind: string;
            name: string;
            namespace: string;
            resourceVersion: string;
            uid: string;
        }

        export interface ClusterSpecRkeConfigMachinePoolsMachineConfigRefPatch {
            apiVersion: string;
            fieldPath: string;
            kind: string;
            name: string;
            namespace: string;
            resourceVersion: string;
            uid: string;
        }

        export interface ClusterSpecRkeConfigMachinePoolsPatch {
            cloudCredentialSecretName: string;
            controlPlaneRole: boolean;
            displayName: string;
            drainBeforeDelete: boolean;
            drainBeforeDeleteTimeout: string;
            dynamicSchemaSpec: string;
            etcdRole: boolean;
            hostnameLengthLimit: number;
            labels: {[key: string]: string};
            machineConfigRef: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsMachineConfigRefPatch;
            machineDeploymentAnnotations: {[key: string]: string};
            machineDeploymentLabels: {[key: string]: string};
            machineOS: string;
            maxUnhealthy: string;
            name: string;
            nodeStartupTimeout: string;
            paused: boolean;
            quantity: number;
            rollingUpdate: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsRollingUpdatePatch;
            taints: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsTaintsPatch[];
            unhealthyNodeTimeout: string;
            unhealthyRange: string;
            workerRole: boolean;
        }

        export interface ClusterSpecRkeConfigMachinePoolsRollingUpdate {
            maxSurge: number | string;
            maxUnavailable: number | string;
        }

        export interface ClusterSpecRkeConfigMachinePoolsRollingUpdatePatch {
            maxSurge: number | string;
            maxUnavailable: number | string;
        }

        export interface ClusterSpecRkeConfigMachinePoolsTaints {
            effect: string;
            key: string;
            timeAdded: string;
            value: string;
        }

        export interface ClusterSpecRkeConfigMachinePoolsTaintsPatch {
            effect: string;
            key: string;
            timeAdded: string;
            value: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorConfig {
            config: {[key: string]: any};
            machineLabelSelector: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelector;
        }

        export interface ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecRkeConfigMachineSelectorConfigPatch {
            config: {[key: string]: any};
            machineLabelSelector: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorConfigMachineLabelSelectorPatch;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFiles {
            fileSources: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSources[];
            machineLabelSelector: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelector;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSources {
            configMap: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMap;
            secret: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecret;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMap {
            defaultPermissions: string;
            items: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMapItems[];
            name: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMapItems {
            dynamic: boolean;
            hash: string;
            key: string;
            path: string;
            permissions: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMapItemsPatch {
            dynamic: boolean;
            hash: string;
            key: string;
            path: string;
            permissions: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMapPatch {
            defaultPermissions: string;
            items: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMapItemsPatch[];
            name: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesPatch {
            configMap: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesConfigMapPatch;
            secret: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecretPatch;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecret {
            defaultPermissions: string;
            items: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecretItems[];
            name: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecretItems {
            dynamic: boolean;
            hash: string;
            key: string;
            path: string;
            permissions: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecretItemsPatch {
            dynamic: boolean;
            hash: string;
            key: string;
            path: string;
            permissions: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecretPatch {
            defaultPermissions: string;
            items: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesSecretItemsPatch[];
            name: string;
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelector {
            matchExpressions: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelectorPatch {
            matchExpressions: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface ClusterSpecRkeConfigMachineSelectorFilesPatch {
            fileSources: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesFileSourcesPatch[];
            machineLabelSelector: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesMachineLabelSelectorPatch;
        }

        export interface ClusterSpecRkeConfigNetworking {
            stackPreference: string;
        }

        export interface ClusterSpecRkeConfigNetworkingPatch {
            stackPreference: string;
        }

        export interface ClusterSpecRkeConfigPatch {
            additionalManifest: string;
            chartValues: {[key: string]: any};
            dataDirectories: outputs.provisioning.v1.ClusterSpecRkeConfigDataDirectoriesPatch;
            etcd: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdPatch;
            etcdSnapshotCreate: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdSnapshotCreatePatch;
            etcdSnapshotRestore: outputs.provisioning.v1.ClusterSpecRkeConfigEtcdSnapshotRestorePatch;
            infrastructureRef: outputs.provisioning.v1.ClusterSpecRkeConfigInfrastructureRefPatch;
            machineGlobalConfig: {[key: string]: any};
            machinePoolDefaults: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolDefaultsPatch;
            machinePools: outputs.provisioning.v1.ClusterSpecRkeConfigMachinePoolsPatch[];
            machineSelectorConfig: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorConfigPatch[];
            machineSelectorFiles: outputs.provisioning.v1.ClusterSpecRkeConfigMachineSelectorFilesPatch[];
            networking: outputs.provisioning.v1.ClusterSpecRkeConfigNetworkingPatch;
            provisionGeneration: number;
            registries: outputs.provisioning.v1.ClusterSpecRkeConfigRegistriesPatch;
            rotateCertificates: outputs.provisioning.v1.ClusterSpecRkeConfigRotateCertificatesPatch;
            rotateEncryptionKeys: outputs.provisioning.v1.ClusterSpecRkeConfigRotateEncryptionKeysPatch;
            upgradeStrategy: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyPatch;
        }

        export interface ClusterSpecRkeConfigRegistries {
            configs: {[key: string]: {[key: string]: string}};
            mirrors: {[key: string]: {[key: string]: string}};
        }

        export interface ClusterSpecRkeConfigRegistriesPatch {
            configs: {[key: string]: {[key: string]: string}};
            mirrors: {[key: string]: {[key: string]: string}};
        }

        export interface ClusterSpecRkeConfigRotateCertificates {
            generation: number;
            services: string[];
        }

        export interface ClusterSpecRkeConfigRotateCertificatesPatch {
            generation: number;
            services: string[];
        }

        export interface ClusterSpecRkeConfigRotateEncryptionKeys {
            generation: number;
        }

        export interface ClusterSpecRkeConfigRotateEncryptionKeysPatch {
            generation: number;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategy {
            controlPlaneConcurrency: string;
            controlPlaneDrainOptions: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptions;
            workerConcurrency: string;
            workerDrainOptions: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptions;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptions {
            deleteEmptyDirData: boolean;
            disableEviction: boolean;
            enabled: boolean;
            force: boolean;
            gracePeriod: number;
            ignoreDaemonSets: boolean;
            ignoreErrors: boolean;
            postDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPostDrainHooks[];
            preDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPreDrainHooks[];
            skipWaitForDeleteTimeoutSeconds: number;
            timeout: number;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPatch {
            deleteEmptyDirData: boolean;
            disableEviction: boolean;
            enabled: boolean;
            force: boolean;
            gracePeriod: number;
            ignoreDaemonSets: boolean;
            ignoreErrors: boolean;
            postDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPostDrainHooksPatch[];
            preDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPreDrainHooksPatch[];
            skipWaitForDeleteTimeoutSeconds: number;
            timeout: number;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPostDrainHooks {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPostDrainHooksPatch {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPreDrainHooks {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPreDrainHooksPatch {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyPatch {
            controlPlaneConcurrency: string;
            controlPlaneDrainOptions: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyControlPlaneDrainOptionsPatch;
            workerConcurrency: string;
            workerDrainOptions: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPatch;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptions {
            deleteEmptyDirData: boolean;
            disableEviction: boolean;
            enabled: boolean;
            force: boolean;
            gracePeriod: number;
            ignoreDaemonSets: boolean;
            ignoreErrors: boolean;
            postDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPostDrainHooks[];
            preDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPreDrainHooks[];
            skipWaitForDeleteTimeoutSeconds: number;
            timeout: number;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPatch {
            deleteEmptyDirData: boolean;
            disableEviction: boolean;
            enabled: boolean;
            force: boolean;
            gracePeriod: number;
            ignoreDaemonSets: boolean;
            ignoreErrors: boolean;
            postDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPostDrainHooksPatch[];
            preDrainHooks: outputs.provisioning.v1.ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPreDrainHooksPatch[];
            skipWaitForDeleteTimeoutSeconds: number;
            timeout: number;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPostDrainHooks {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPostDrainHooksPatch {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPreDrainHooks {
            annotation: string;
        }

        export interface ClusterSpecRkeConfigUpgradeStrategyWorkerDrainOptionsPreDrainHooksPatch {
            annotation: string;
        }

        export interface ClusterStatus {
            agentDeployed: boolean;
            clientSecretName: string;
            clusterName: string;
            conditions: outputs.provisioning.v1.ClusterStatusConditions[];
            fleetWorkspaceName: string;
            observedGeneration: number;
            ready: boolean;
        }

        export interface ClusterStatusConditions {
            lastTransitionTime: string;
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface ClusterStatusConditionsPatch {
            lastTransitionTime: string;
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface ClusterStatusPatch {
            agentDeployed: boolean;
            clientSecretName: string;
            clusterName: string;
            conditions: outputs.provisioning.v1.ClusterStatusConditionsPatch[];
            fleetWorkspaceName: string;
            observedGeneration: number;
            ready: boolean;
        }

    }
}
