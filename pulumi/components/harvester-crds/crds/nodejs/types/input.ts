// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace harvesterhci {
    export namespace v1beta1 {
        export interface KeyPair {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"harvesterhci.io/v1beta1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"KeyPair">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.harvesterhci.v1beta1.KeyPairSpec>;
            status?: pulumi.Input<inputs.harvesterhci.v1beta1.KeyPairStatus>;
        }

        export interface KeyPairSpec {
            publicKey?: pulumi.Input<string>;
        }

        export interface KeyPairSpecPatch {
            publicKey?: pulumi.Input<string>;
        }

        export interface KeyPairStatus {
            conditions?: pulumi.Input<pulumi.Input<inputs.harvesterhci.v1beta1.KeyPairStatusConditions>[]>;
            fingerPrint?: pulumi.Input<string>;
        }

        export interface KeyPairStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * Type of the condition.
             */
            type?: pulumi.Input<string>;
        }

        export interface Setting {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"harvesterhci.io/v1beta1">;
            customized?: pulumi.Input<boolean>;
            default?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"Setting">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            source?: pulumi.Input<string>;
            status?: pulumi.Input<inputs.harvesterhci.v1beta1.SettingStatus>;
            value?: pulumi.Input<string>;
        }

        export interface SettingStatus {
            conditions?: pulumi.Input<pulumi.Input<inputs.harvesterhci.v1beta1.SettingStatusConditions>[]>;
        }

        export interface SettingStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * Type of the condition.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineImage {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"harvesterhci.io/v1beta1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"VirtualMachineImage">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.harvesterhci.v1beta1.VirtualMachineImageSpec>;
            status?: pulumi.Input<inputs.harvesterhci.v1beta1.VirtualMachineImageStatus>;
        }

        export interface VirtualMachineImageSpec {
            backend?: pulumi.Input<string>;
            checksum?: pulumi.Input<string>;
            description?: pulumi.Input<string>;
            displayName?: pulumi.Input<string>;
            pvcName?: pulumi.Input<string>;
            pvcNamespace?: pulumi.Input<string>;
            retry?: pulumi.Input<number>;
            securityParameters?: pulumi.Input<inputs.harvesterhci.v1beta1.VirtualMachineImageSpecSecurityParameters>;
            sourceType?: pulumi.Input<string>;
            storageClassParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The VM Image will store the data volume in the target storage class.
             */
            targetStorageClassName?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        export interface VirtualMachineImageSpecPatch {
            backend?: pulumi.Input<string>;
            checksum?: pulumi.Input<string>;
            description?: pulumi.Input<string>;
            displayName?: pulumi.Input<string>;
            pvcName?: pulumi.Input<string>;
            pvcNamespace?: pulumi.Input<string>;
            retry?: pulumi.Input<number>;
            securityParameters?: pulumi.Input<inputs.harvesterhci.v1beta1.VirtualMachineImageSpecSecurityParametersPatch>;
            sourceType?: pulumi.Input<string>;
            storageClassParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The VM Image will store the data volume in the target storage class.
             */
            targetStorageClassName?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        export interface VirtualMachineImageSpecSecurityParameters {
            cryptoOperation?: pulumi.Input<string>;
            sourceImageName?: pulumi.Input<string>;
            sourceImageNamespace?: pulumi.Input<string>;
        }

        export interface VirtualMachineImageSpecSecurityParametersPatch {
            cryptoOperation?: pulumi.Input<string>;
            sourceImageName?: pulumi.Input<string>;
            sourceImageNamespace?: pulumi.Input<string>;
        }

        export interface VirtualMachineImageStatus {
            appliedUrl?: pulumi.Input<string>;
            backupTarget?: pulumi.Input<inputs.harvesterhci.v1beta1.VirtualMachineImageStatusBackupTarget>;
            conditions?: pulumi.Input<pulumi.Input<inputs.harvesterhci.v1beta1.VirtualMachineImageStatusConditions>[]>;
            failed?: pulumi.Input<number>;
            lastFailedTime?: pulumi.Input<string>;
            progress?: pulumi.Input<number>;
            size?: pulumi.Input<number>;
            storageClassName?: pulumi.Input<string>;
            /**
             * The VM Image will store the data volume in the target storage class.
             */
            targetStorageClassName?: pulumi.Input<string>;
            virtualSize?: pulumi.Input<number>;
        }

        /**
         * BackupTarget is where VM Backup stores
         */
        export interface VirtualMachineImageStatusBackupTarget {
            bucketName?: pulumi.Input<string>;
            bucketRegion?: pulumi.Input<string>;
            endpoint?: pulumi.Input<string>;
        }

        export interface VirtualMachineImageStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * Type of the condition.
             */
            type?: pulumi.Input<string>;
        }

    }
}

export namespace k8s {
    export namespace v1 {
        export interface NetworkAttachmentDefinition {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"k8s.cni.cncf.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"NetworkAttachmentDefinition">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.k8s.v1.NetworkAttachmentDefinitionSpec>;
        }

        export interface NetworkAttachmentDefinitionSpec {
            config?: pulumi.Input<string>;
        }

        export interface NetworkAttachmentDefinitionSpecPatch {
            config?: pulumi.Input<string>;
        }
    }
}

export namespace kubevirt {
    export namespace v1 {
        /**
         * VirtualMachine handles the VirtualMachines that are not running
         * or are in a stopped state
         * The VirtualMachine contains the template to create the
         * VirtualMachineInstance. It also mirrors the running state of the created
         * VirtualMachineInstance in its status.
         */
        export interface VirtualMachine {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"kubevirt.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"VirtualMachine">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpec>;
            status?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatus>;
        }

        /**
         * VirtualMachineInstance is *the* VirtualMachineInstance Definition. It represents a virtual machine in the runtime environment of kubernetes.
         */
        export interface VirtualMachineInstance {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"kubevirt.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"VirtualMachineInstance">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpec>;
            status?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatus>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineInstanceSpec {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentials>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinity>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDnsConfig>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomain>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbe>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecNetworks>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbe>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTolerations>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTopologySpreadConstraints>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumes>[]>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineInstanceSpecAccessCredentials {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKey>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPassword>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsPatch {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPatch>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordPatch>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKey {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySource>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourcePatch>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethod {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodPatch {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySource {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecret>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPassword {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSource>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourcePatch>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethod {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethodPatch {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSource {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecret>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineInstanceSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinity>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineInstanceSpecAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPatch>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineInstanceSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDnsConfigOptions>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineInstanceSpecDnsConfigOptions {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineInstanceSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineInstanceSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDnsConfigOptionsPatch>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineInstanceSpecDomain {
            chassis?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainChassis>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpu>;
            devices?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevices>;
            features?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeatures>;
            firmware?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmware>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainLaunchSecurity>;
            machine?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainMachine>;
            memory?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainMemory>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainResources>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineInstanceSpecDomainChassis {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineInstanceSpecDomainChassisPatch {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainCpu {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuFeatures>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuNuma>;
            realtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuRealtime>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineInstanceSpecDomainCpuFeatures {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineInstanceSpecDomainCpuFeaturesPatch {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineInstanceSpecDomainCpuNuma {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineInstanceSpecDomainCpuNumaPatch {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainCpuPatch {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuFeaturesPatch>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuNumaPatch>;
            realtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuRealtimePatch>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineInstanceSpecDomainCpuRealtime {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineInstanceSpecDomainCpuRealtimePatch {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineInstanceSpecDomainDevices {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisks>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesFilesystems>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpus>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesHostDevices>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInputs>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfaces>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesSound>;
            tpm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesTpm>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesWatchdog>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesDisks {
            blockSize?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksBlockSize>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksCdrom>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksDisk>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksLun>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSize {
            custom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustom>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolume>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustom {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustomPatch {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolume {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolumePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizePatch {
            custom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustomPatch>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolumePatch>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksCdrom {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksCdromPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksDisk {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksDiskPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksLun {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksLunPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesDisksPatch {
            blockSize?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizePatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksCdromPatch>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksDiskPatch>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksLunPatch>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesFilesystems {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesFilesystemsPatch {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpus {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptions>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusPatch {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsPatch>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptions {
            display?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplay>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplay {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsPatch {
            display?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesHostDevices {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesHostDevicesPatch {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInputs {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInputsPatch {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInterfaces {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesBinding>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptions>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesPorts>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesBinding {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesBindingPatch {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptions {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPatch {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesPatch {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesBindingPatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPatch>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesPortsPatch>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesPorts {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesPortsPatch {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineInstanceSpecDomainDevicesPatch {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesDisksPatch>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesFilesystemsPatch>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesGpusPatch>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesHostDevicesPatch>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInputsPatch>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesInterfacesPatch>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesSoundPatch>;
            tpm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesTpmPatch>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesWatchdogPatch>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesSound {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesSoundPatch {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesTpm {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesTpmPatch {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdog {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esb>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esb {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esbPatch {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdogPatch {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esbPatch>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineInstanceSpecDomainFeatures {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesAcpi>;
            apic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesApic>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHyperv>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervPassthrough>;
            kvm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesKvm>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesPvspinlock>;
            smm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesSmm>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesAcpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesAcpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesApic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesApicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHyperv {
            evmcs?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervEvmcs>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervFrequencies>;
            ipi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervIpi>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenment>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervRelaxed>;
            reset?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervReset>;
            runtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervRuntime>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocks>;
            synic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSynic>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimer>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervTlbflush>;
            vapic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervVapic>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervVendorid>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervVpindex>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervEvmcs {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervEvmcsPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervFrequencies {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervFrequenciesPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervIpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervIpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervPassthrough {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervPassthroughPatch {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervPatch {
            evmcs?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervEvmcsPatch>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervFrequenciesPatch>;
            ipi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervIpiPatch>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenmentPatch>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervRelaxedPatch>;
            reset?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervResetPatch>;
            runtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervRuntimePatch>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocksPatch>;
            synic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSynicPatch>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerPatch>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervTlbflushPatch>;
            vapic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervVapicPatch>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervVendoridPatch>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervVpindexPatch>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenment {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenmentPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRelaxed {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRelaxedPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervReset {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervResetPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRuntime {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRuntimePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocks {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocksPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimer {
            direct?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirect>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirect {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirectPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerPatch {
            direct?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirectPatch>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervTlbflush {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervTlbflushPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVapic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVapicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVendorid {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVendoridPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVpindex {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVpindexPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesKvm {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesKvmPatch {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesPatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesAcpiPatch>;
            apic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesApicPatch>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervPatch>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesHypervPassthroughPatch>;
            kvm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesKvmPatch>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesPvspinlockPatch>;
            smm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesSmmPatch>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesPvspinlock {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesPvspinlockPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesSmm {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesSmmPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineInstanceSpecDomainFirmware {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareAcpi>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareBootloader>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareKernelBoot>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareAcpi {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareAcpiPatch {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloader {
            bios?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareBootloaderBios>;
            efi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareBootloaderEfi>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderBios {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderBiosPatch {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderEfi {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderEfiPatch {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderPatch {
            bios?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareBootloaderBiosPatch>;
            efi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareBootloaderEfiPatch>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBoot {
            container?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareKernelBootContainer>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBootContainer {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBootContainerPatch {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBootPatch {
            container?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareKernelBootContainerPatch>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwarePatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareAcpiPatch>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareBootloaderPatch>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwareKernelBootPatch>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecurity {
            sev?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainLaunchSecuritySev>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecurityPatch {
            sev?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainLaunchSecuritySevPatch>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySev {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicy>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySevPatch {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicyPatch>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicy {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicyPatch {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineInstanceSpecDomainMachine {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineInstanceSpecDomainMachinePatch {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineInstanceSpecDomainMemory {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainMemoryHugepages>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineInstanceSpecDomainMemoryHugepages {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineInstanceSpecDomainMemoryHugepagesPatch {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineInstanceSpecDomainMemoryPatch {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainMemoryHugepagesPatch>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineInstanceSpecDomainPatch {
            chassis?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainChassisPatch>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainCpuPatch>;
            devices?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainDevicesPatch>;
            features?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFeaturesPatch>;
            firmware?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainFirmwarePatch>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainLaunchSecurityPatch>;
            machine?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainMachinePatch>;
            memory?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainMemoryPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainResourcesPatch>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineInstanceSpecDomainResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineInstanceSpecDomainResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineInstanceSpecNetworks {
            multus?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecNetworksMultus>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecNetworksPod>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineInstanceSpecNetworksMultus {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineInstanceSpecNetworksMultusPatch {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineInstanceSpecNetworksPatch {
            multus?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecNetworksMultusPatch>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecNetworksPodPatch>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineInstanceSpecNetworksPod {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineInstanceSpecNetworksPodPatch {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineInstanceSpecPatch {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAccessCredentialsPatch>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecAffinityPatch>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDnsConfigPatch>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecDomainPatch>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecLivenessProbePatch>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecNetworksPatch>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbePatch>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTolerationsPatch>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTopologySpreadConstraintsPatch>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesPatch>[]>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecReadinessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineInstanceSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineInstanceSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraints {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineInstanceSpecVolumes {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitConfigDrive>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitNoCloud>;
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesConfigMap>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesContainerDisk>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDataVolume>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPI>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesEmptyDisk>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesEphemeral>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesHostDisk>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesMemoryDump>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesPersistentVolumeClaim>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSecret>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesServiceAccount>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSysprep>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDrive {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRef>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDrivePatch {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRefPatch>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloud {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRef>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudPatch {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRefPatch>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineInstanceSpecVolumesConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineInstanceSpecVolumesConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineInstanceSpecVolumesContainerDisk {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineInstanceSpecVolumesContainerDiskPatch {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineInstanceSpecVolumesDataVolume {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineInstanceSpecVolumesDataVolumePatch {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPI {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIFields>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFields {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRef>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRef>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsPatch {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRefPatch>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRefPatch>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIPatch {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsPatch>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineInstanceSpecVolumesEmptyDisk {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineInstanceSpecVolumesEmptyDiskPatch {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeral {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaim>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeralPatch {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaimPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineInstanceSpecVolumesHostDisk {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineInstanceSpecVolumesHostDiskPatch {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineInstanceSpecVolumesMemoryDump {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineInstanceSpecVolumesMemoryDumpPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineInstanceSpecVolumesPatch {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitConfigDrivePatch>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesCloudInitNoCloudPatch>;
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesConfigMapPatch>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesContainerDiskPatch>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDataVolumePatch>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesDownwardAPIPatch>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesEmptyDiskPatch>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesEphemeralPatch>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesHostDiskPatch>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesMemoryDumpPatch>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesPersistentVolumeClaimPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSecretPatch>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesServiceAccountPatch>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSysprepPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineInstanceSpecVolumesSecret {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineInstanceSpecVolumesSecretPatch {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineInstanceSpecVolumesServiceAccount {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineInstanceSpecVolumesServiceAccountPatch {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprep {
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSysprepConfigMap>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSysprepSecret>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepPatch {
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSysprepConfigMapPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceSpecVolumesSysprepSecretPatch>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepSecret {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepSecretPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status is the high level overview of how the VirtualMachineInstance is doing. It contains information available to controllers and users.
         */
        export interface VirtualMachineInstanceStatus {
            /**
             * VSOCKCID is used to track the allocated VSOCK CID in the VM.
             */
            VSOCKCID?: pulumi.Input<number>;
            /**
             * ActivePods is a mapping of pod UID to node name.
             * It is possible for multiple pods to be running for a single VMI during migration.
             */
            activePods?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Conditions are specific points in VirtualMachineInstance's pod runtime.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusConditions>[]>;
            currentCPUTopology?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusCurrentCPUTopology>;
            /**
             * EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want
             * to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.
             */
            evacuationNodeName?: pulumi.Input<string>;
            /**
             * FSFreezeStatus is the state of the fs of the guest
             * it can be either frozen or thawed
             */
            fsFreezeStatus?: pulumi.Input<string>;
            guestOSInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusGuestOSInfo>;
            /**
             * Interfaces represent the details of available network interfaces.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusInterfaces>[]>;
            kernelBootStatus?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusKernelBootStatus>;
            /**
             * LauncherContainerImageVersion indicates what container image is currently active for the vmi.
             */
            launcherContainerImageVersion?: pulumi.Input<string>;
            machine?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMachine>;
            memory?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMemory>;
            /**
             * MigratedVolumes lists the source and destination volumes during the volume migration
             */
            migratedVolumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMigratedVolumes>[]>;
            /**
             * Represents the method using which the vmi can be migrated: live migration or block migration
             */
            migrationMethod?: pulumi.Input<string>;
            migrationState?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMigrationState>;
            /**
             * This represents the migration transport
             */
            migrationTransport?: pulumi.Input<string>;
            /**
             * NodeName is the name where the VirtualMachineInstance is currently running.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
             */
            phase?: pulumi.Input<string>;
            /**
             * PhaseTransitionTimestamp is the timestamp of when the last phase change occurred
             */
            phaseTransitionTimestamps?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusPhaseTransitionTimestamps>[]>;
            /**
             * The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements
             * See PodQOSClass type for available QOS classes
             * More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
             */
            qosClass?: pulumi.Input<string>;
            /**
             * A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'
             */
            reason?: pulumi.Input<string>;
            /**
             * RuntimeUser is used to determine what user will be used in launcher
             */
            runtimeUser?: pulumi.Input<number>;
            /**
             * SELinuxContext is the actual SELinux context of the virt-launcher pod
             */
            selinuxContext?: pulumi.Input<string>;
            topologyHints?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusTopologyHints>;
            /**
             * VirtualMachineRevisionName is used to get the vm revision of the vmi when doing
             * an online vm snapshot
             */
            virtualMachineRevisionName?: pulumi.Input<string>;
            /**
             * VolumeStatus contains the statuses of all the volumes
             */
            volumeStatus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusVolumeStatus>[]>;
        }

        export interface VirtualMachineInstanceStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        /**
         * CurrentCPUTopology specifies the current CPU topology used by the VM workload.
         * Current topology may differ from the desired topology in the spec while CPU hotplug
         * takes place.
         */
        export interface VirtualMachineInstanceStatusCurrentCPUTopology {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * Guest OS Information
         */
        export interface VirtualMachineInstanceStatusGuestOSInfo {
            /**
             * Guest OS Id
             */
            id?: pulumi.Input<string>;
            /**
             * Guest OS Kernel Release
             */
            kernelRelease?: pulumi.Input<string>;
            /**
             * Kernel version of the Guest OS
             */
            kernelVersion?: pulumi.Input<string>;
            /**
             * Machine type of the Guest OS
             */
            machine?: pulumi.Input<string>;
            /**
             * Name of the Guest OS
             */
            name?: pulumi.Input<string>;
            /**
             * Guest OS Pretty Name
             */
            prettyName?: pulumi.Input<string>;
            /**
             * Guest OS Version
             */
            version?: pulumi.Input<string>;
            /**
             * Version ID of the Guest OS
             */
            versionId?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceStatusInterfaces {
            /**
             * Specifies the origin of the interface data collected. values: domain, guest-agent, multus-status.
             */
            infoSource?: pulumi.Input<string>;
            /**
             * The interface name inside the Virtual Machine
             */
            interfaceName?: pulumi.Input<string>;
            /**
             * IP address of a Virtual Machine interface. It is always the first item of
             * IPs
             */
            ipAddress?: pulumi.Input<string>;
            /**
             * List of all IP addresses of a Virtual Machine interface
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hardware address of a Virtual Machine interface
             */
            mac?: pulumi.Input<string>;
            /**
             * Name of the interface, corresponds to name of the network assigned to the interface
             */
            name?: pulumi.Input<string>;
            /**
             * PodInterfaceName represents the name of the pod network interface
             */
            podInterfaceName?: pulumi.Input<string>;
            /**
             * Specifies how many queues are allocated by MultiQueue
             */
            queueCount?: pulumi.Input<number>;
        }

        /**
         * KernelBootStatus contains info about the kernelBootContainer
         */
        export interface VirtualMachineInstanceStatusKernelBootStatus {
            initrdInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusKernelBootStatusInitrdInfo>;
            kernelInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusKernelBootStatusKernelInfo>;
        }

        /**
         * InitrdInfo show info about the initrd file
         */
        export interface VirtualMachineInstanceStatusKernelBootStatusInitrdInfo {
            /**
             * Checksum is the checksum of the initrd file
             */
            checksum?: pulumi.Input<number>;
        }

        /**
         * KernelInfo show info about the kernel image
         */
        export interface VirtualMachineInstanceStatusKernelBootStatusKernelInfo {
            /**
             * Checksum is the checksum of the kernel image
             */
            checksum?: pulumi.Input<number>;
        }

        /**
         * Machine shows the final resulting qemu machine type. This can be different
         * than the machine type selected in the spec, due to qemus machine type alias mechanism.
         */
        export interface VirtualMachineInstanceStatusMachine {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Memory shows various informations about the VirtualMachine memory.
         */
        export interface VirtualMachineInstanceStatusMemory {
            /**
             * GuestAtBoot specifies with how much memory the VirtualMachine intiallly booted with.
             */
            guestAtBoot?: pulumi.Input<number | string>;
            /**
             * GuestCurrent specifies how much memory is currently available for the VirtualMachine.
             */
            guestCurrent?: pulumi.Input<number | string>;
            /**
             * GuestRequested specifies how much memory was requested (hotplug) for the VirtualMachine.
             */
            guestRequested?: pulumi.Input<number | string>;
        }

        /**
         * StorageMigratedVolumeInfo tracks the information about the source and destination volumes during the volume migration
         */
        export interface VirtualMachineInstanceStatusMigratedVolumes {
            destinationPVCInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMigratedVolumesDestinationPVCInfo>;
            sourcePVCInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMigratedVolumesSourcePVCInfo>;
            /**
             * VolumeName is the name of the volume that is being migrated
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * DestinationPVCInfo contains the information about the destination PVC
         */
        export interface VirtualMachineInstanceStatusMigratedVolumesDestinationPVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * SourcePVCInfo contains the information about the source PVC
         */
        export interface VirtualMachineInstanceStatusMigratedVolumesSourcePVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * Represents the status of a live migration
         */
        export interface VirtualMachineInstanceStatusMigrationState {
            /**
             * Indicates that the migration has been requested to abort
             */
            abortRequested?: pulumi.Input<boolean>;
            /**
             * Indicates the final status of the live migration abortion
             */
            abortStatus?: pulumi.Input<string>;
            /**
             * Indicates the migration completed
             */
            completed?: pulumi.Input<boolean>;
            /**
             * The time the migration action ended
             */
            endTimestamp?: pulumi.Input<string>;
            /**
             * Indicates that the migration failed
             */
            failed?: pulumi.Input<boolean>;
            /**
             * Contains the reason why the migration failed
             */
            failureReason?: pulumi.Input<string>;
            migrationConfiguration?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusMigrationStateMigrationConfiguration>;
            /**
             * Name of the migration policy. If string is empty, no policy is matched
             */
            migrationPolicyName?: pulumi.Input<string>;
            /**
             * The VirtualMachineInstanceMigration object associated with this migration
             */
            migrationUid?: pulumi.Input<string>;
            /**
             * Lets us know if the vmi is currently running pre or post copy migration
             */
            mode?: pulumi.Input<string>;
            /**
             * The source node that the VMI originated on
             */
            sourceNode?: pulumi.Input<string>;
            /**
             * If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here
             */
            sourcePersistentStatePVCName?: pulumi.Input<string>;
            sourcePod?: pulumi.Input<string>;
            /**
             * The time the migration action began
             */
            startTimestamp?: pulumi.Input<string>;
            /**
             * The UID of the target attachment pod for hotplug volumes
             */
            targetAttachmentPodUID?: pulumi.Input<string>;
            /**
             * If the VMI requires dedicated CPUs, this field will
             * hold the dedicated CPU set on the target node
             */
            targetCPUSet?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * The list of ports opened for live migration on the destination node
             */
            targetDirectMigrationNodePorts?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
            /**
             * The target node that the VMI is moving to
             */
            targetNode?: pulumi.Input<string>;
            /**
             * The address of the target node to use for the migration
             */
            targetNodeAddress?: pulumi.Input<string>;
            /**
             * The Target Node has seen the Domain Start Event
             */
            targetNodeDomainDetected?: pulumi.Input<boolean>;
            /**
             * The timestamp at which the target node detects the domain is active
             */
            targetNodeDomainReadyTimestamp?: pulumi.Input<string>;
            /**
             * If the VMI requires dedicated CPUs, this field will
             * hold the numa topology on the target node
             */
            targetNodeTopology?: pulumi.Input<string>;
            /**
             * If the VMI being migrated uses persistent features (backend-storage), its target PVC name is saved here
             */
            targetPersistentStatePVCName?: pulumi.Input<string>;
            /**
             * The target pod that the VMI is moving to
             */
            targetPod?: pulumi.Input<string>;
        }

        /**
         * Migration configurations to apply
         */
        export interface VirtualMachineInstanceStatusMigrationStateMigrationConfiguration {
            /**
             * AllowAutoConverge allows the platform to compromise performance/availability of VMIs to
             * guarantee successful VMI live migrations. Defaults to false
             */
            allowAutoConverge?: pulumi.Input<boolean>;
            /**
             * AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs
             * to successfully live-migrate. However, events like a network failure can cause a VMI crash.
             * If set to true, migrations will still start in pre-copy, but switch to post-copy when
             * CompletionTimeoutPerGiB triggers. Defaults to false
             */
            allowPostCopy?: pulumi.Input<boolean>;
            /**
             * BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use.
             * The value is in quantity per second. Defaults to 0 (no limit)
             */
            bandwidthPerMigration?: pulumi.Input<number | string>;
            /**
             * CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take.
             * If a live-migration takes longer to migrate than this value multiplied by the size of the VMI,
             * the migration will be cancelled, unless AllowPostCopy is true. Defaults to 150
             */
            completionTimeoutPerGiB?: pulumi.Input<number>;
            /**
             * When set to true, DisableTLS will disable the additional layer of live migration encryption
             * provided by KubeVirt. This is usually a bad idea. Defaults to false
             */
            disableTLS?: pulumi.Input<boolean>;
            /**
             * By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher.
             * When set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target.
             * That will ensure the target virt-launcher doesn't share categories with another pod on the node.
             * However, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels.
             */
            matchSELinuxLevelOnMigration?: pulumi.Input<boolean>;
            /**
             * Network is the name of the CNI network to use for live migrations. By default, migrations go
             * through the pod network.
             */
            network?: pulumi.Input<string>;
            /**
             * NodeDrainTaintKey defines the taint key that indicates a node should be drained.
             * Note: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain
             */
            nodeDrainTaintKey?: pulumi.Input<string>;
            /**
             * ParallelMigrationsPerCluster is the total number of concurrent live migrations
             * allowed cluster-wide. Defaults to 5
             */
            parallelMigrationsPerCluster?: pulumi.Input<number>;
            /**
             * ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations
             * allowed per node. Defaults to 2
             */
            parallelOutboundMigrationsPerNode?: pulumi.Input<number>;
            /**
             * ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress.
             * Hitting this timeout means a migration transferred 0 data for that many seconds. The migration is
             * then considered stuck and therefore cancelled. Defaults to 150
             */
            progressTimeout?: pulumi.Input<number>;
            /**
             * UnsafeMigrationOverride allows live migrations to occur even if the compatibility check
             * indicates the migration will be unsafe to the guest. Defaults to false
             */
            unsafeMigrationOverride?: pulumi.Input<boolean>;
        }

        /**
         * VirtualMachineInstancePhaseTransitionTimestamp gives a timestamp in relation to when a phase is set on a vmi
         */
        export interface VirtualMachineInstanceStatusPhaseTransitionTimestamps {
            /**
             * Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
             */
            phase?: pulumi.Input<string>;
            /**
             * PhaseTransitionTimestamp is the timestamp of when the phase change occurred
             */
            phaseTransitionTimestamp?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceStatusTopologyHints {
            tscFrequency?: pulumi.Input<number>;
        }

        /**
         * VolumeStatus represents information about the status of volumes attached to the VirtualMachineInstance.
         */
        export interface VirtualMachineInstanceStatusVolumeStatus {
            containerDiskVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusVolumeStatusContainerDiskVolume>;
            hotplugVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusVolumeStatusHotplugVolume>;
            memoryDumpVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusVolumeStatusMemoryDumpVolume>;
            /**
             * Message is a detailed message about the current hotplug volume phase
             */
            message?: pulumi.Input<string>;
            /**
             * Name is the name of the volume
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaimInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineInstanceStatusVolumeStatusPersistentVolumeClaimInfo>;
            /**
             * Phase is the phase
             */
            phase?: pulumi.Input<string>;
            /**
             * Reason is a brief description of why we are in the current hotplug volume phase
             */
            reason?: pulumi.Input<string>;
            /**
             * Represents the size of the volume
             */
            size?: pulumi.Input<number>;
            /**
             * Target is the target name used when adding the volume to the VM, eg: vda
             */
            target?: pulumi.Input<string>;
        }

        /**
         * ContainerDiskVolume shows info about the containerdisk, if the volume is a containerdisk
         */
        export interface VirtualMachineInstanceStatusVolumeStatusContainerDiskVolume {
            /**
             * Checksum is the checksum of the rootdisk or kernel artifacts inside the containerdisk
             */
            checksum?: pulumi.Input<number>;
        }

        /**
         * If the volume is hotplug, this will contain the hotplug status.
         */
        export interface VirtualMachineInstanceStatusVolumeStatusHotplugVolume {
            /**
             * AttachPodName is the name of the pod used to attach the volume to the node.
             */
            attachPodName?: pulumi.Input<string>;
            /**
             * AttachPodUID is the UID of the pod used to attach the volume to the node.
             */
            attachPodUID?: pulumi.Input<string>;
        }

        /**
         * If the volume is memorydump volume, this will contain the memorydump info.
         */
        export interface VirtualMachineInstanceStatusVolumeStatusMemoryDumpVolume {
            /**
             * ClaimName is the name of the pvc the memory was dumped to
             */
            claimName?: pulumi.Input<string>;
            /**
             * EndTimestamp is the time when the memory dump completed
             */
            endTimestamp?: pulumi.Input<string>;
            /**
             * StartTimestamp is the time when the memory dump started
             */
            startTimestamp?: pulumi.Input<string>;
            /**
             * TargetFileName is the name of the memory dump output
             */
            targetFileName?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimInfo is information about the PVC that handler requires during start flow
         */
        export interface VirtualMachineInstanceStatusVolumeStatusPersistentVolumeClaimInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * Spec contains the specification of VirtualMachineInstance created
         */
        export interface VirtualMachineSpec {
            /**
             * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
             * DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
             */
            dataVolumeTemplates?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplates>[]>;
            instancetype?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecInstancetype>;
            preference?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecPreference>;
            /**
             * Running state indicates the requested running state of the VirtualMachineInstance
             * mutually exclusive with Running
             */
            runStrategy?: pulumi.Input<string>;
            /**
             * Running controls whether the associatied VirtualMachineInstance is created or not
             * Mutually exclusive with RunStrategy
             * Deprecated: VirtualMachineInstance field "Running" is now deprecated, please use RunStrategy instead.
             */
            running?: pulumi.Input<boolean>;
            template?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplate>;
            /**
             * UpdateVolumesStrategy is the strategy to apply on volumes updates
             */
            updateVolumesStrategy?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecDataVolumeTemplates {
            /**
             * APIVersion defines the versioned schema of this representation of an object.
             * Servers should convert recognized schemas to the latest internal value, and
             * may reject unrecognized values.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents.
             * Servers may infer this from the endpoint the client submits requests to.
             * Cannot be updated.
             * In CamelCase.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpec>;
            /**
             * DataVolumeTemplateDummyStatus is here simply for backwards compatibility with
             * a previous API.
             */
            status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineSpecDataVolumeTemplatesPatch {
            /**
             * APIVersion defines the versioned schema of this representation of an object.
             * Servers should convert recognized schemas to the latest internal value, and
             * may reject unrecognized values.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents.
             * Servers may infer this from the endpoint the client submits requests to.
             * Cannot be updated.
             * In CamelCase.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPatch>;
            /**
             * DataVolumeTemplateDummyStatus is here simply for backwards compatibility with
             * a previous API.
             */
            status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * DataVolumeSpec contains the DataVolume specification.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpec {
            /**
             * Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
             */
            checkpoints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecCheckpoints>[]>;
            /**
             * DataVolumeContentType options: "kubevirt", "archive"
             */
            contentType?: pulumi.Input<string>;
            /**
             * FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
             */
            finalCheckpoint?: pulumi.Input<boolean>;
            /**
             * Preallocation controls whether storage for DataVolumes should be allocated in advance.
             */
            preallocation?: pulumi.Input<boolean>;
            /**
             * PriorityClassName for Importer, Cloner and Uploader pod
             */
            priorityClassName?: pulumi.Input<string>;
            pvc?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvc>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSource>;
            sourceRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceRef>;
            storage?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorage>;
        }

        /**
         * DataVolumeCheckpoint defines a stage in a warm migration.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecCheckpoints {
            /**
             * Current is the identifier of the snapshot created for this checkpoint.
             */
            current?: pulumi.Input<string>;
            /**
             * Previous is the identifier of the snapshot from the previous checkpoint.
             */
            previous?: pulumi.Input<string>;
        }

        /**
         * DataVolumeCheckpoint defines a stage in a warm migration.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecCheckpointsPatch {
            /**
             * Current is the identifier of the snapshot created for this checkpoint.
             */
            current?: pulumi.Input<string>;
            /**
             * Previous is the identifier of the snapshot from the previous checkpoint.
             */
            previous?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSpec contains the DataVolume specification.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPatch {
            /**
             * Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
             */
            checkpoints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecCheckpointsPatch>[]>;
            /**
             * DataVolumeContentType options: "kubevirt", "archive"
             */
            contentType?: pulumi.Input<string>;
            /**
             * FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
             */
            finalCheckpoint?: pulumi.Input<boolean>;
            /**
             * Preallocation controls whether storage for DataVolumes should be allocated in advance.
             */
            preallocation?: pulumi.Input<boolean>;
            /**
             * PriorityClassName for Importer, Cloner and Uploader pod
             */
            priorityClassName?: pulumi.Input<string>;
            pvc?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourcePatch>;
            sourceRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceRefPatch>;
            storage?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStoragePatch>;
        }

        /**
         * PVC is the PVC specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvc {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSource>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRef>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcResources>;
            selector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelector>;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * PVC is the PVC specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcResourcesPatch>;
            selector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorPatch>;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Source is the src of the data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSource {
            /**
             * DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
             */
            blank?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            gcs?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceGcs>;
            http?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceHttp>;
            imageio?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceImageio>;
            pvc?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourcePvc>;
            registry?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistry>;
            s3?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceS3>;
            snapshot?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshot>;
            /**
             * DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
             */
            upload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            vddk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceVddk>;
        }

        /**
         * DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceGcs {
            /**
             * SecretRef provides the secret reference needed to access the GCS source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the GCS source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceGcsPatch {
            /**
             * SecretRef provides the secret reference needed to access the GCS source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the GCS source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceHttp {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests
             */
            extraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information
             */
            secretExtraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the http(s) endpoint
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceHttpPatch {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests
             */
            extraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information
             */
            secretExtraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the http(s) endpoint
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceImageio {
            /**
             * CertConfigMap provides a reference to the CA cert
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * DiskID provides id of a disk to be imported
             */
            diskId?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the ovirt-engine
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the ovirt-engine
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceImageioPatch {
            /**
             * CertConfigMap provides a reference to the CA cert
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * DiskID provides id of a disk to be imported
             */
            diskId?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the ovirt-engine
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the ovirt-engine
             */
            url?: pulumi.Input<string>;
        }

        /**
         * Source is the src of the data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourcePatch {
            /**
             * DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
             */
            blank?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            gcs?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceGcsPatch>;
            http?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceHttpPatch>;
            imageio?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceImageioPatch>;
            pvc?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourcePvcPatch>;
            registry?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistryPatch>;
            s3?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceS3Patch>;
            snapshot?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshotPatch>;
            /**
             * DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
             */
            upload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            vddk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecSourceVddkPatch>;
        }

        /**
         * DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourcePvc {
            /**
             * The name of the source PVC
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source PVC
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourcePvcPatch {
            /**
             * The name of the source PVC
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source PVC
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SourceRef is an indirect reference to the source of data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRef {
            /**
             * The kind of the source reference, currently only "DataSource" is supported
             */
            kind?: pulumi.Input<string>;
            /**
             * The name of the source reference
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source reference, defaults to the DataVolume namespace
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SourceRef is an indirect reference to the source of data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRefPatch {
            /**
             * The kind of the source reference, currently only "DataSource" is supported
             */
            kind?: pulumi.Input<string>;
            /**
             * The name of the source reference
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source reference, defaults to the DataVolume namespace
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistry {
            /**
             * CertConfigMap provides a reference to the Registry certs
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ImageStream is the name of image stream for import
             */
            imageStream?: pulumi.Input<string>;
            /**
             * PullMethod can be either "pod" (default import), or "node" (node docker cache based import)
             */
            pullMethod?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the Registry source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the registry source (starting with the scheme: docker, oci-archive)
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistryPatch {
            /**
             * CertConfigMap provides a reference to the Registry certs
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ImageStream is the name of image stream for import
             */
            imageStream?: pulumi.Input<string>;
            /**
             * PullMethod can be either "pod" (default import), or "node" (node docker cache based import)
             */
            pullMethod?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the Registry source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the registry source (starting with the scheme: docker, oci-archive)
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceS3 {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the S3 source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the S3 source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceS3Patch {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the S3 source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the S3 source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshot {
            /**
             * The name of the source VolumeSnapshot
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source VolumeSnapshot
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshotPatch {
            /**
             * The name of the source VolumeSnapshot
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source VolumeSnapshot
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceVddk {
            /**
             * BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
             */
            backingFile?: pulumi.Input<string>;
            /**
             * InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
             */
            initImageURL?: pulumi.Input<string>;
            /**
             * SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
             */
            secretRef?: pulumi.Input<string>;
            /**
             * Thumbprint is the certificate thumbprint of the vCenter or ESXi host
             */
            thumbprint?: pulumi.Input<string>;
            /**
             * URL is the URL of the vCenter or ESXi host with the VM to migrate
             */
            url?: pulumi.Input<string>;
            /**
             * UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceVddkPatch {
            /**
             * BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
             */
            backingFile?: pulumi.Input<string>;
            /**
             * InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
             */
            initImageURL?: pulumi.Input<string>;
            /**
             * SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
             */
            secretRef?: pulumi.Input<string>;
            /**
             * Thumbprint is the certificate thumbprint of the vCenter or ESXi host
             */
            thumbprint?: pulumi.Input<string>;
            /**
             * URL is the URL of the vCenter or ESXi host with the VM to migrate
             */
            url?: pulumi.Input<string>;
            /**
             * UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Storage is the requested storage specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorage {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSource>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRef>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageResources>;
            selector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelector>;
            /**
             * Name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         * If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         * If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
         * This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
         * There are two important differences between DataSource and DataSourceRef:
         * * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
         * This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
         * There are two important differences between DataSource and DataSourceRef:
         * * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Storage is the requested storage specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStoragePatch {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesPatch>;
            selector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorPatch>;
            /**
             * Name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaims>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name?: pulumi.Input<string>;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request?: pulumi.Input<string>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name?: pulumi.Input<string>;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaimsPatch>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * InstancetypeMatcher references a instancetype that is used to fill fields in Template
         */
        export interface VirtualMachineSpecInstancetype {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype
             * to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which instancetype resource is referenced.
             * Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype".
             * If not specified, "VirtualMachineClusterInstancetype" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially
             * captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * InstancetypeMatcher references a instancetype that is used to fill fields in Template
         */
        export interface VirtualMachineSpecInstancetypePatch {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype
             * to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which instancetype resource is referenced.
             * Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype".
             * If not specified, "VirtualMachineClusterInstancetype" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially
             * captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * Spec contains the specification of VirtualMachineInstance created
         */
        export interface VirtualMachineSpecPatch {
            /**
             * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
             * DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
             */
            dataVolumeTemplates?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecDataVolumeTemplatesPatch>[]>;
            instancetype?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecInstancetypePatch>;
            preference?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecPreferencePatch>;
            /**
             * Running state indicates the requested running state of the VirtualMachineInstance
             * mutually exclusive with Running
             */
            runStrategy?: pulumi.Input<string>;
            /**
             * Running controls whether the associatied VirtualMachineInstance is created or not
             * Mutually exclusive with RunStrategy
             * Deprecated: VirtualMachineInstance field "Running" is now deprecated, please use RunStrategy instead.
             */
            running?: pulumi.Input<boolean>;
            template?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplatePatch>;
            /**
             * UpdateVolumesStrategy is the strategy to apply on volumes updates
             */
            updateVolumesStrategy?: pulumi.Input<string>;
        }

        /**
         * PreferenceMatcher references a set of preference that is used to fill fields in Template
         */
        export interface VirtualMachineSpecPreference {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the preference
             * to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which preference resource is referenced.
             * Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference".
             * If not specified, "VirtualMachineClusterPreference" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is
             * initially captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * PreferenceMatcher references a set of preference that is used to fill fields in Template
         */
        export interface VirtualMachineSpecPreferencePatch {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the preference
             * to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which preference resource is referenced.
             * Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference".
             * If not specified, "VirtualMachineClusterPreference" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is
             * initially captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * Template is the direct specification of VirtualMachineInstance
         */
        export interface VirtualMachineSpecTemplate {
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpec>;
        }

        /**
         * Template is the direct specification of VirtualMachineInstance
         */
        export interface VirtualMachineSpecTemplatePatch {
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecPatch>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineSpecTemplateSpec {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentials>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinity>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDnsConfig>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomain>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbe>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecNetworks>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbe>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTolerations>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTopologySpreadConstraints>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumes>[]>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentials {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKey>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPassword>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsPatch {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPatch>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPatch>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKey {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySource>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourcePatch>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodPatch {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySource {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecret>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPassword {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSource>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourcePatch>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethod {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethodPatch {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSource {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecret>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineSpecTemplateSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinity>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPatch>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDnsConfigOptions>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfigOptions {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDnsConfigOptionsPatch>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineSpecTemplateSpecDomain {
            chassis?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainChassis>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpu>;
            devices?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevices>;
            features?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeatures>;
            firmware?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmware>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainLaunchSecurity>;
            machine?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainMachine>;
            memory?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainMemory>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainResources>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineSpecTemplateSpecDomainChassis {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineSpecTemplateSpecDomainChassisPatch {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpu {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuFeatures>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuNuma>;
            realtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuRealtime>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuFeatures {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuFeaturesPatch {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuNuma {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuNumaPatch {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuPatch {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuFeaturesPatch>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuNumaPatch>;
            realtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuRealtimePatch>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuRealtime {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuRealtimePatch {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevices {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisks>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesFilesystems>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpus>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesHostDevices>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInputs>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfaces>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesSound>;
            tpm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesTpm>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesWatchdog>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisks {
            blockSize?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSize>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksCdrom>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksDisk>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksLun>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSize {
            custom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustom>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolume>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustom {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustomPatch {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolume {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolumePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizePatch {
            custom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustomPatch>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolumePatch>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksCdrom {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksCdromPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksDisk {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksDiskPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksLun {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksLunPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksPatch {
            blockSize?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizePatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksCdromPatch>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksDiskPatch>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksLunPatch>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesFilesystems {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesFilesystemsPatch {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpus {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptions>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusPatch {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsPatch>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptions {
            display?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplay>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplay {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsPatch {
            display?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesHostDevices {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesHostDevicesPatch {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInputs {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInputsPatch {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfaces {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBinding>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptions>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPorts>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBinding {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBindingPatch {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptions {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPatch {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPatch {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBindingPatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPatch>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPortsPatch>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPorts {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPortsPatch {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesPatch {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesDisksPatch>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesFilesystemsPatch>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesGpusPatch>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesHostDevicesPatch>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInputsPatch>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPatch>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesSoundPatch>;
            tpm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesTpmPatch>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesWatchdogPatch>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesSound {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesSoundPatch {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesTpm {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesTpmPatch {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdog {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esb>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esb {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esbPatch {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdogPatch {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esbPatch>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeatures {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesAcpi>;
            apic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesApic>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHyperv>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthrough>;
            kvm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesKvm>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlock>;
            smm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesSmm>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesAcpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesAcpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesApic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesApicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHyperv {
            evmcs?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcs>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequencies>;
            ipi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpi>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenment>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxed>;
            reset?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervReset>;
            runtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntime>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocks>;
            synic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynic>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimer>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflush>;
            vapic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapic>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendorid>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindex>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcs {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcsPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequencies {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequenciesPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthrough {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthroughPatch {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervPatch {
            evmcs?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcsPatch>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequenciesPatch>;
            ipi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpiPatch>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenmentPatch>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxedPatch>;
            reset?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervResetPatch>;
            runtime?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntimePatch>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocksPatch>;
            synic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynicPatch>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerPatch>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflushPatch>;
            vapic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapicPatch>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendoridPatch>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindexPatch>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenment {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenmentPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxed {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxedPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervReset {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervResetPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntime {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntimePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocks {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocksPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimer {
            direct?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirect>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirect {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirectPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerPatch {
            direct?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirectPatch>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflush {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflushPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendorid {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendoridPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindex {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindexPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesKvm {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesKvmPatch {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesPatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesAcpiPatch>;
            apic?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesApicPatch>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervPatch>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthroughPatch>;
            kvm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesKvmPatch>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlockPatch>;
            smm?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesSmmPatch>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlock {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlockPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesSmm {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesSmmPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmware {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareAcpi>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareBootloader>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBoot>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareAcpi {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareAcpiPatch {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloader {
            bios?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBios>;
            efi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfi>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBios {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBiosPatch {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfi {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfiPatch {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderPatch {
            bios?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBiosPatch>;
            efi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfiPatch>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBoot {
            container?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainer>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainer {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainerPatch {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootPatch {
            container?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainerPatch>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwarePatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareAcpiPatch>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderPatch>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootPatch>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecurity {
            sev?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySev>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecurityPatch {
            sev?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPatch>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySev {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicy>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPatch {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicyPatch>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicy {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicyPatch {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMachine {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMachinePatch {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemory {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainMemoryHugepages>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemoryHugepages {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemoryHugepagesPatch {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemoryPatch {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainMemoryHugepagesPatch>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineSpecTemplateSpecDomainPatch {
            chassis?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainChassisPatch>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainCpuPatch>;
            devices?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainDevicesPatch>;
            features?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFeaturesPatch>;
            firmware?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainFirmwarePatch>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainLaunchSecurityPatch>;
            machine?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainMachinePatch>;
            memory?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainMemoryPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainResourcesPatch>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineSpecTemplateSpecNetworks {
            multus?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecNetworksMultus>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecNetworksPod>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksMultus {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksMultusPatch {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksPatch {
            multus?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecNetworksMultusPatch>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecNetworksPodPatch>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksPod {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksPodPatch {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineSpecTemplateSpecPatch {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAccessCredentialsPatch>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecAffinityPatch>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDnsConfigPatch>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecDomainPatch>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecLivenessProbePatch>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecNetworksPatch>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbePatch>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTolerationsPatch>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsPatch>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesPatch>[]>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecReadinessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineSpecTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineSpecTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraints {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineSpecTemplateSpecVolumes {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrive>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloud>;
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesConfigMap>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesContainerDisk>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDataVolume>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPI>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesEmptyDisk>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesEphemeral>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesHostDisk>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesMemoryDump>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaim>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSecret>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesServiceAccount>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSysprep>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrive {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRef>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrivePatch {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRefPatch>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloud {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRef>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudPatch {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRefPatch>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesContainerDisk {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesContainerDiskPatch {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDataVolume {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDataVolumePatch {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPI {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFields>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFields {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRef>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRef>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsPatch {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRefPatch>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRefPatch>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsPatch>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEmptyDisk {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEmptyDiskPatch {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeral {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaim>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeralPatch {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaimPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineSpecTemplateSpecVolumesHostDisk {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineSpecTemplateSpecVolumesHostDiskPatch {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineSpecTemplateSpecVolumesMemoryDump {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineSpecTemplateSpecVolumesMemoryDumpPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesPatch {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrivePatch>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudPatch>;
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesConfigMapPatch>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesContainerDiskPatch>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDataVolumePatch>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesDownwardAPIPatch>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesEmptyDiskPatch>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesEphemeralPatch>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesHostDiskPatch>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesMemoryDumpPatch>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaimPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSecretPatch>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesServiceAccountPatch>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSysprepPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSecret {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSecretPatch {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesServiceAccount {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesServiceAccountPatch {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprep {
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSysprepConfigMap>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSysprepSecret>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepPatch {
            configMap?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSysprepConfigMapPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineSpecTemplateSpecVolumesSysprepSecretPatch>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepSecret {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepSecretPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status holds the current state of the controller and brief information
         * about its associated VirtualMachineInstance
         */
        export interface VirtualMachineStatus {
            /**
             * Hold the state information of the VirtualMachine and its VirtualMachineInstance
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusConditions>[]>;
            /**
             * Created indicates if the virtual machine is created in the cluster
             */
            created?: pulumi.Input<boolean>;
            /**
             * DesiredGeneration is the generation which is desired for the VMI.
             * This will be used in comparisons with ObservedGeneration to understand when
             * the VMI is out of sync. This will be changed at the same time as
             * ObservedGeneration to remove errors which could occur if Generation is
             * updated through an Update() before ObservedGeneration in Status.
             */
            desiredGeneration?: pulumi.Input<number>;
            memoryDumpRequest?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusMemoryDumpRequest>;
            /**
             * ObservedGeneration is the generation observed by the vmi when started.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * PrintableStatus is a human readable, high-level representation of the status of the virtual machine
             */
            printableStatus?: pulumi.Input<string>;
            /**
             * Ready indicates if the virtual machine is running and ready
             */
            ready?: pulumi.Input<boolean>;
            /**
             * RestoreInProgress is the name of the VirtualMachineRestore currently executing
             */
            restoreInProgress?: pulumi.Input<string>;
            /**
             * RunStrategy tracks the last recorded RunStrategy used by the VM.
             * This is needed to correctly process the next strategy (for now only the RerunOnFailure)
             */
            runStrategy?: pulumi.Input<string>;
            /**
             * SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing
             */
            snapshotInProgress?: pulumi.Input<string>;
            startFailure?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusStartFailure>;
            /**
             * StateChangeRequests indicates a list of actions that should be taken on a VMI
             * e.g. stop a specific VMI then start a new one.
             */
            stateChangeRequests?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusStateChangeRequests>[]>;
            /**
             * VolumeRequests indicates a list of volumes add or remove from the VMI template and
             * hotplug on an active running VMI.
             */
            volumeRequests?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequests>[]>;
            /**
             * VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is
             * supported by each volume.
             */
            volumeSnapshotStatuses?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeSnapshotStatuses>[]>;
            volumeUpdateState?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeUpdateState>;
        }

        /**
         * VirtualMachineCondition represents the state of VirtualMachine
         */
        export interface VirtualMachineStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        /**
         * MemoryDumpRequest tracks memory dump request phase and info of getting a memory
         * dump to the given pvc
         */
        export interface VirtualMachineStatusMemoryDumpRequest {
            /**
             * ClaimName is the name of the pvc that will contain the memory dump
             */
            claimName?: pulumi.Input<string>;
            /**
             * EndTimestamp represents the time the memory dump was completed
             */
            endTimestamp?: pulumi.Input<string>;
            /**
             * FileName represents the name of the output file
             */
            fileName?: pulumi.Input<string>;
            /**
             * Message is a detailed message about failure of the memory dump
             */
            message?: pulumi.Input<string>;
            /**
             * Phase represents the memory dump phase
             */
            phase?: pulumi.Input<string>;
            /**
             * Remove represents request of dissociating the memory dump pvc
             */
            remove?: pulumi.Input<boolean>;
            /**
             * StartTimestamp represents the time the memory dump started
             */
            startTimestamp?: pulumi.Input<string>;
        }

        /**
         * StartFailure tracks consecutive VMI startup failures for the purposes of
         * crash loop backoffs
         */
        export interface VirtualMachineStatusStartFailure {
            consecutiveFailCount?: pulumi.Input<number>;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            lastFailedVMIUID?: pulumi.Input<string>;
            retryAfterTimestamp?: pulumi.Input<string>;
        }

        export interface VirtualMachineStatusStateChangeRequests {
            /**
             * Indicates the type of action that is requested. e.g. Start or Stop
             */
            action?: pulumi.Input<string>;
            /**
             * Provides additional data in order to perform the Action
             */
            data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable
             */
            uid?: pulumi.Input<string>;
        }

        export interface VirtualMachineStatusVolumeRequests {
            addVolumeOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptions>;
            removeVolumeOptions?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsRemoveVolumeOptions>;
        }

        /**
         * AddVolumeOptions when set indicates a volume should be added. The details
         * within this field specify how to add the volume
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptions {
            disk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDisk>;
            /**
             * When present, indicates that modifications should not be
             * persisted. An invalid or unrecognized dryRun directive will
             * result in an error response and no further processing of the
             * request. Valid values are:
             * - All: all dry run stages will be processed
             */
            dryRun?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name represents the name that will be used to map the
             * disk to the corresponding volume. This overrides any name
             * set inside the Disk struct itself.
             */
            name?: pulumi.Input<string>;
            volumeSource?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSource>;
        }

        /**
         * Disk represents the hotplug disk that will be plugged into the running VMI
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDisk {
            blockSize?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSize>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskCdrom>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskDisk>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskLun>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSize {
            custom?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeCustom>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeMatchVolume>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeCustom {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeMatchVolume {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskCdrom {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskDisk {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskLun {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        /**
         * VolumeSource represents the source of the volume to map to the disk.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSource {
            dataVolume?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourceDataVolume>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourcePersistentVolumeClaim>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourceDataVolume {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourcePersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * RemoveVolumeOptions when set indicates a volume should be removed. The details
         * within this field specify how to add the volume
         */
        export interface VirtualMachineStatusVolumeRequestsRemoveVolumeOptions {
            /**
             * When present, indicates that modifications should not be
             * persisted. An invalid or unrecognized dryRun directive will
             * result in an error response and no further processing of the
             * request. Valid values are:
             * - All: all dry run stages will be processed
             */
            dryRun?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name represents the name that maps to both the disk and volume that
             * should be removed
             */
            name?: pulumi.Input<string>;
        }

        export interface VirtualMachineStatusVolumeSnapshotStatuses {
            /**
             * True if the volume supports snapshotting
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Volume name
             */
            name?: pulumi.Input<string>;
            /**
             * Empty if snapshotting is enabled, contains reason otherwise
             */
            reason?: pulumi.Input<string>;
        }

        /**
         * VolumeUpdateState contains the information about the volumes set
         * updates related to the volumeUpdateStrategy
         */
        export interface VirtualMachineStatusVolumeUpdateState {
            volumeMigrationState?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeUpdateStateVolumeMigrationState>;
        }

        /**
         * VolumeMigrationState tracks the information related to the volume migration
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationState {
            /**
             * MigratedVolumes lists the source and destination volumes during the volume migration
             */
            migratedVolumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumes>[]>;
        }

        /**
         * StorageMigratedVolumeInfo tracks the information about the source and destination volumes during the volume migration
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumes {
            destinationPVCInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesDestinationPVCInfo>;
            sourcePVCInfo?: pulumi.Input<inputs.kubevirt.v1.VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesSourcePVCInfo>;
            /**
             * VolumeName is the name of the volume that is being migrated
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * DestinationPVCInfo contains the information about the destination PVC
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesDestinationPVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * SourcePVCInfo contains the information about the source PVC
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesSourcePVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha3 {
        /**
         * VirtualMachine handles the VirtualMachines that are not running
         * or are in a stopped state
         * The VirtualMachine contains the template to create the
         * VirtualMachineInstance. It also mirrors the running state of the created
         * VirtualMachineInstance in its status.
         */
        export interface VirtualMachine {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"kubevirt.io/v1alpha3">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"VirtualMachine">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpec>;
            status?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatus>;
        }

        /**
         * VirtualMachineInstance is *the* VirtualMachineInstance Definition. It represents a virtual machine in the runtime environment of kubernetes.
         */
        export interface VirtualMachineInstance {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"kubevirt.io/v1alpha3">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"VirtualMachineInstance">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpec>;
            status?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatus>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineInstanceSpec {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentials>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinity>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDnsConfig>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomain>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbe>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecNetworks>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbe>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTolerations>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTopologySpreadConstraints>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumes>[]>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineInstanceSpecAccessCredentials {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKey>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPassword>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsPatch {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPatch>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordPatch>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKey {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySource>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourcePatch>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethod {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodPatch {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySource {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecret>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsSshPublicKeySourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPassword {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSource>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourcePatch>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethod {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordPropagationMethodPatch {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSource {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecret>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineInstanceSpecAccessCredentialsUserPasswordSourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineInstanceSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinity>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineInstanceSpecAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPatch>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineInstanceSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDnsConfigOptions>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineInstanceSpecDnsConfigOptions {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineInstanceSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineInstanceSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDnsConfigOptionsPatch>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineInstanceSpecDomain {
            chassis?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainChassis>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpu>;
            devices?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevices>;
            features?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeatures>;
            firmware?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmware>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainLaunchSecurity>;
            machine?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainMachine>;
            memory?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainMemory>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainResources>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineInstanceSpecDomainChassis {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineInstanceSpecDomainChassisPatch {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainCpu {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuFeatures>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuNuma>;
            realtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuRealtime>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineInstanceSpecDomainCpuFeatures {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineInstanceSpecDomainCpuFeaturesPatch {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineInstanceSpecDomainCpuNuma {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineInstanceSpecDomainCpuNumaPatch {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainCpuPatch {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuFeaturesPatch>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuNumaPatch>;
            realtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuRealtimePatch>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineInstanceSpecDomainCpuRealtime {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineInstanceSpecDomainCpuRealtimePatch {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineInstanceSpecDomainDevices {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisks>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesFilesystems>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpus>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesHostDevices>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInputs>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfaces>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesSound>;
            tpm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesTpm>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesWatchdog>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesDisks {
            blockSize?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksBlockSize>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksCdrom>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksDisk>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksLun>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSize {
            custom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustom>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolume>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustom {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustomPatch {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolume {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolumePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksBlockSizePatch {
            custom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeCustomPatch>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizeMatchVolumePatch>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksCdrom {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksCdromPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksDisk {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksDiskPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksLun {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesDisksLunPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesDisksPatch {
            blockSize?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksBlockSizePatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksCdromPatch>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksDiskPatch>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksLunPatch>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesFilesystems {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesFilesystemsPatch {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpus {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptions>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusPatch {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsPatch>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptions {
            display?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplay>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplay {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsPatch {
            display?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesHostDevices {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesHostDevicesPatch {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInputs {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInputsPatch {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInterfaces {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesBinding>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptions>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesPorts>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesBinding {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesBindingPatch {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptions {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPatch {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesPatch {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesBindingPatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesDhcpOptionsPatch>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesPortsPatch>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesPorts {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineInstanceSpecDomainDevicesInterfacesPortsPatch {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineInstanceSpecDomainDevicesPatch {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesDisksPatch>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesFilesystemsPatch>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesGpusPatch>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesHostDevicesPatch>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInputsPatch>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesInterfacesPatch>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesSoundPatch>;
            tpm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesTpmPatch>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesWatchdogPatch>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesSound {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesSoundPatch {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesTpm {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesTpmPatch {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdog {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esb>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esb {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esbPatch {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainDevicesWatchdogPatch {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesWatchdogI6300esbPatch>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineInstanceSpecDomainFeatures {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesAcpi>;
            apic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesApic>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHyperv>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervPassthrough>;
            kvm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesKvm>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesPvspinlock>;
            smm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesSmm>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesAcpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesAcpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesApic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesApicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHyperv {
            evmcs?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervEvmcs>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervFrequencies>;
            ipi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervIpi>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenment>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervRelaxed>;
            reset?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervReset>;
            runtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervRuntime>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocks>;
            synic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSynic>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimer>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervTlbflush>;
            vapic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervVapic>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervVendorid>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervVpindex>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervEvmcs {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervEvmcsPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervFrequencies {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervFrequenciesPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervIpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervIpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervPassthrough {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervPassthroughPatch {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervPatch {
            evmcs?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervEvmcsPatch>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervFrequenciesPatch>;
            ipi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervIpiPatch>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenmentPatch>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervRelaxedPatch>;
            reset?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervResetPatch>;
            runtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervRuntimePatch>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocksPatch>;
            synic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSynicPatch>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerPatch>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervTlbflushPatch>;
            vapic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervVapicPatch>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervVendoridPatch>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervVpindexPatch>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenment {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervReenlightenmentPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRelaxed {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRelaxedPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervReset {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervResetPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRuntime {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervRuntimePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocks {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSpinlocksPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimer {
            direct?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirect>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirect {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirectPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerPatch {
            direct?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervSynictimerDirectPatch>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervTlbflush {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervTlbflushPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVapic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVapicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVendorid {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVendoridPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVpindex {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesHypervVpindexPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesKvm {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesKvmPatch {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesPatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesAcpiPatch>;
            apic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesApicPatch>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervPatch>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesHypervPassthroughPatch>;
            kvm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesKvmPatch>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesPvspinlockPatch>;
            smm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesSmmPatch>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesPvspinlock {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesPvspinlockPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesSmm {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineInstanceSpecDomainFeaturesSmmPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineInstanceSpecDomainFirmware {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareAcpi>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareBootloader>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareKernelBoot>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareAcpi {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareAcpiPatch {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloader {
            bios?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareBootloaderBios>;
            efi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareBootloaderEfi>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderBios {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderBiosPatch {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderEfi {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderEfiPatch {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareBootloaderPatch {
            bios?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareBootloaderBiosPatch>;
            efi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareBootloaderEfiPatch>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBoot {
            container?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareKernelBootContainer>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBootContainer {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBootContainerPatch {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwareKernelBootPatch {
            container?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareKernelBootContainerPatch>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineInstanceSpecDomainFirmwarePatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareAcpiPatch>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareBootloaderPatch>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwareKernelBootPatch>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecurity {
            sev?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainLaunchSecuritySev>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecurityPatch {
            sev?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainLaunchSecuritySevPatch>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySev {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicy>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySevPatch {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicyPatch>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicy {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineInstanceSpecDomainLaunchSecuritySevPolicyPatch {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineInstanceSpecDomainMachine {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineInstanceSpecDomainMachinePatch {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineInstanceSpecDomainMemory {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainMemoryHugepages>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineInstanceSpecDomainMemoryHugepages {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineInstanceSpecDomainMemoryHugepagesPatch {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineInstanceSpecDomainMemoryPatch {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainMemoryHugepagesPatch>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineInstanceSpecDomainPatch {
            chassis?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainChassisPatch>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainCpuPatch>;
            devices?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainDevicesPatch>;
            features?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFeaturesPatch>;
            firmware?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainFirmwarePatch>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainLaunchSecurityPatch>;
            machine?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainMachinePatch>;
            memory?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainMemoryPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainResourcesPatch>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineInstanceSpecDomainResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineInstanceSpecDomainResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecLivenessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineInstanceSpecNetworks {
            multus?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecNetworksMultus>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecNetworksPod>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineInstanceSpecNetworksMultus {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineInstanceSpecNetworksMultusPatch {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineInstanceSpecNetworksPatch {
            multus?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecNetworksMultusPatch>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecNetworksPodPatch>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineInstanceSpecNetworksPod {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineInstanceSpecNetworksPodPatch {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineInstanceSpecPatch {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAccessCredentialsPatch>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecAffinityPatch>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDnsConfigPatch>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecDomainPatch>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecLivenessProbePatch>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecNetworksPatch>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbePatch>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTolerationsPatch>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTopologySpreadConstraintsPatch>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesPatch>[]>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineInstanceSpecReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineInstanceSpecReadinessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecReadinessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineInstanceSpecReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineInstanceSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineInstanceSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraints {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineInstanceSpecTopologySpreadConstraintsPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecTopologySpreadConstraintsLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineInstanceSpecVolumes {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitConfigDrive>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitNoCloud>;
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesConfigMap>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesContainerDisk>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDataVolume>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPI>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesEmptyDisk>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesEphemeral>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesHostDisk>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesMemoryDump>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesPersistentVolumeClaim>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSecret>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesServiceAccount>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSysprep>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDrive {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRef>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDrivePatch {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRefPatch>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitConfigDriveSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloud {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRef>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudPatch {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRefPatch>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineInstanceSpecVolumesCloudInitNoCloudSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineInstanceSpecVolumesConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineInstanceSpecVolumesConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineInstanceSpecVolumesContainerDisk {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineInstanceSpecVolumesContainerDiskPatch {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineInstanceSpecVolumesDataVolume {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineInstanceSpecVolumesDataVolumePatch {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPI {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIFields>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFields {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRef>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRef>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsPatch {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsFieldRefPatch>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRefPatch>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIFieldsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineInstanceSpecVolumesDownwardAPIPatch {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIFieldsPatch>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineInstanceSpecVolumesEmptyDisk {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineInstanceSpecVolumesEmptyDiskPatch {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeral {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaim>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeralPatch {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaimPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesEphemeralPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineInstanceSpecVolumesHostDisk {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineInstanceSpecVolumesHostDiskPatch {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineInstanceSpecVolumesMemoryDump {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineInstanceSpecVolumesMemoryDumpPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineInstanceSpecVolumesPatch {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitConfigDrivePatch>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesCloudInitNoCloudPatch>;
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesConfigMapPatch>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesContainerDiskPatch>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDataVolumePatch>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesDownwardAPIPatch>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesEmptyDiskPatch>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesEphemeralPatch>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesHostDiskPatch>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesMemoryDumpPatch>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesPersistentVolumeClaimPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSecretPatch>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesServiceAccountPatch>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSysprepPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineInstanceSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineInstanceSpecVolumesSecret {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineInstanceSpecVolumesSecretPatch {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineInstanceSpecVolumesServiceAccount {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineInstanceSpecVolumesServiceAccountPatch {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprep {
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSysprepConfigMap>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSysprepSecret>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepPatch {
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSysprepConfigMapPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceSpecVolumesSysprepSecretPatch>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepSecret {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineInstanceSpecVolumesSysprepSecretPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status is the high level overview of how the VirtualMachineInstance is doing. It contains information available to controllers and users.
         */
        export interface VirtualMachineInstanceStatus {
            /**
             * VSOCKCID is used to track the allocated VSOCK CID in the VM.
             */
            VSOCKCID?: pulumi.Input<number>;
            /**
             * ActivePods is a mapping of pod UID to node name.
             * It is possible for multiple pods to be running for a single VMI during migration.
             */
            activePods?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Conditions are specific points in VirtualMachineInstance's pod runtime.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusConditions>[]>;
            currentCPUTopology?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusCurrentCPUTopology>;
            /**
             * EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want
             * to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.
             */
            evacuationNodeName?: pulumi.Input<string>;
            /**
             * FSFreezeStatus is the state of the fs of the guest
             * it can be either frozen or thawed
             */
            fsFreezeStatus?: pulumi.Input<string>;
            guestOSInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusGuestOSInfo>;
            /**
             * Interfaces represent the details of available network interfaces.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusInterfaces>[]>;
            kernelBootStatus?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusKernelBootStatus>;
            /**
             * LauncherContainerImageVersion indicates what container image is currently active for the vmi.
             */
            launcherContainerImageVersion?: pulumi.Input<string>;
            machine?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMachine>;
            memory?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMemory>;
            /**
             * MigratedVolumes lists the source and destination volumes during the volume migration
             */
            migratedVolumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMigratedVolumes>[]>;
            /**
             * Represents the method using which the vmi can be migrated: live migration or block migration
             */
            migrationMethod?: pulumi.Input<string>;
            migrationState?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMigrationState>;
            /**
             * This represents the migration transport
             */
            migrationTransport?: pulumi.Input<string>;
            /**
             * NodeName is the name where the VirtualMachineInstance is currently running.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
             */
            phase?: pulumi.Input<string>;
            /**
             * PhaseTransitionTimestamp is the timestamp of when the last phase change occurred
             */
            phaseTransitionTimestamps?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusPhaseTransitionTimestamps>[]>;
            /**
             * The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements
             * See PodQOSClass type for available QOS classes
             * More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
             */
            qosClass?: pulumi.Input<string>;
            /**
             * A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'
             */
            reason?: pulumi.Input<string>;
            /**
             * RuntimeUser is used to determine what user will be used in launcher
             */
            runtimeUser?: pulumi.Input<number>;
            /**
             * SELinuxContext is the actual SELinux context of the virt-launcher pod
             */
            selinuxContext?: pulumi.Input<string>;
            topologyHints?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusTopologyHints>;
            /**
             * VirtualMachineRevisionName is used to get the vm revision of the vmi when doing
             * an online vm snapshot
             */
            virtualMachineRevisionName?: pulumi.Input<string>;
            /**
             * VolumeStatus contains the statuses of all the volumes
             */
            volumeStatus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusVolumeStatus>[]>;
        }

        export interface VirtualMachineInstanceStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        /**
         * CurrentCPUTopology specifies the current CPU topology used by the VM workload.
         * Current topology may differ from the desired topology in the spec while CPU hotplug
         * takes place.
         */
        export interface VirtualMachineInstanceStatusCurrentCPUTopology {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * Guest OS Information
         */
        export interface VirtualMachineInstanceStatusGuestOSInfo {
            /**
             * Guest OS Id
             */
            id?: pulumi.Input<string>;
            /**
             * Guest OS Kernel Release
             */
            kernelRelease?: pulumi.Input<string>;
            /**
             * Kernel version of the Guest OS
             */
            kernelVersion?: pulumi.Input<string>;
            /**
             * Machine type of the Guest OS
             */
            machine?: pulumi.Input<string>;
            /**
             * Name of the Guest OS
             */
            name?: pulumi.Input<string>;
            /**
             * Guest OS Pretty Name
             */
            prettyName?: pulumi.Input<string>;
            /**
             * Guest OS Version
             */
            version?: pulumi.Input<string>;
            /**
             * Version ID of the Guest OS
             */
            versionId?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceStatusInterfaces {
            /**
             * Specifies the origin of the interface data collected. values: domain, guest-agent, multus-status.
             */
            infoSource?: pulumi.Input<string>;
            /**
             * The interface name inside the Virtual Machine
             */
            interfaceName?: pulumi.Input<string>;
            /**
             * IP address of a Virtual Machine interface. It is always the first item of
             * IPs
             */
            ipAddress?: pulumi.Input<string>;
            /**
             * List of all IP addresses of a Virtual Machine interface
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hardware address of a Virtual Machine interface
             */
            mac?: pulumi.Input<string>;
            /**
             * Name of the interface, corresponds to name of the network assigned to the interface
             */
            name?: pulumi.Input<string>;
            /**
             * PodInterfaceName represents the name of the pod network interface
             */
            podInterfaceName?: pulumi.Input<string>;
            /**
             * Specifies how many queues are allocated by MultiQueue
             */
            queueCount?: pulumi.Input<number>;
        }

        /**
         * KernelBootStatus contains info about the kernelBootContainer
         */
        export interface VirtualMachineInstanceStatusKernelBootStatus {
            initrdInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusKernelBootStatusInitrdInfo>;
            kernelInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusKernelBootStatusKernelInfo>;
        }

        /**
         * InitrdInfo show info about the initrd file
         */
        export interface VirtualMachineInstanceStatusKernelBootStatusInitrdInfo {
            /**
             * Checksum is the checksum of the initrd file
             */
            checksum?: pulumi.Input<number>;
        }

        /**
         * KernelInfo show info about the kernel image
         */
        export interface VirtualMachineInstanceStatusKernelBootStatusKernelInfo {
            /**
             * Checksum is the checksum of the kernel image
             */
            checksum?: pulumi.Input<number>;
        }

        /**
         * Machine shows the final resulting qemu machine type. This can be different
         * than the machine type selected in the spec, due to qemus machine type alias mechanism.
         */
        export interface VirtualMachineInstanceStatusMachine {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Memory shows various informations about the VirtualMachine memory.
         */
        export interface VirtualMachineInstanceStatusMemory {
            /**
             * GuestAtBoot specifies with how much memory the VirtualMachine intiallly booted with.
             */
            guestAtBoot?: pulumi.Input<number | string>;
            /**
             * GuestCurrent specifies how much memory is currently available for the VirtualMachine.
             */
            guestCurrent?: pulumi.Input<number | string>;
            /**
             * GuestRequested specifies how much memory was requested (hotplug) for the VirtualMachine.
             */
            guestRequested?: pulumi.Input<number | string>;
        }

        /**
         * StorageMigratedVolumeInfo tracks the information about the source and destination volumes during the volume migration
         */
        export interface VirtualMachineInstanceStatusMigratedVolumes {
            destinationPVCInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMigratedVolumesDestinationPVCInfo>;
            sourcePVCInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMigratedVolumesSourcePVCInfo>;
            /**
             * VolumeName is the name of the volume that is being migrated
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * DestinationPVCInfo contains the information about the destination PVC
         */
        export interface VirtualMachineInstanceStatusMigratedVolumesDestinationPVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * SourcePVCInfo contains the information about the source PVC
         */
        export interface VirtualMachineInstanceStatusMigratedVolumesSourcePVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * Represents the status of a live migration
         */
        export interface VirtualMachineInstanceStatusMigrationState {
            /**
             * Indicates that the migration has been requested to abort
             */
            abortRequested?: pulumi.Input<boolean>;
            /**
             * Indicates the final status of the live migration abortion
             */
            abortStatus?: pulumi.Input<string>;
            /**
             * Indicates the migration completed
             */
            completed?: pulumi.Input<boolean>;
            /**
             * The time the migration action ended
             */
            endTimestamp?: pulumi.Input<string>;
            /**
             * Indicates that the migration failed
             */
            failed?: pulumi.Input<boolean>;
            /**
             * Contains the reason why the migration failed
             */
            failureReason?: pulumi.Input<string>;
            migrationConfiguration?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusMigrationStateMigrationConfiguration>;
            /**
             * Name of the migration policy. If string is empty, no policy is matched
             */
            migrationPolicyName?: pulumi.Input<string>;
            /**
             * The VirtualMachineInstanceMigration object associated with this migration
             */
            migrationUid?: pulumi.Input<string>;
            /**
             * Lets us know if the vmi is currently running pre or post copy migration
             */
            mode?: pulumi.Input<string>;
            /**
             * The source node that the VMI originated on
             */
            sourceNode?: pulumi.Input<string>;
            /**
             * If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here
             */
            sourcePersistentStatePVCName?: pulumi.Input<string>;
            sourcePod?: pulumi.Input<string>;
            /**
             * The time the migration action began
             */
            startTimestamp?: pulumi.Input<string>;
            /**
             * The UID of the target attachment pod for hotplug volumes
             */
            targetAttachmentPodUID?: pulumi.Input<string>;
            /**
             * If the VMI requires dedicated CPUs, this field will
             * hold the dedicated CPU set on the target node
             */
            targetCPUSet?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * The list of ports opened for live migration on the destination node
             */
            targetDirectMigrationNodePorts?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
            /**
             * The target node that the VMI is moving to
             */
            targetNode?: pulumi.Input<string>;
            /**
             * The address of the target node to use for the migration
             */
            targetNodeAddress?: pulumi.Input<string>;
            /**
             * The Target Node has seen the Domain Start Event
             */
            targetNodeDomainDetected?: pulumi.Input<boolean>;
            /**
             * The timestamp at which the target node detects the domain is active
             */
            targetNodeDomainReadyTimestamp?: pulumi.Input<string>;
            /**
             * If the VMI requires dedicated CPUs, this field will
             * hold the numa topology on the target node
             */
            targetNodeTopology?: pulumi.Input<string>;
            /**
             * If the VMI being migrated uses persistent features (backend-storage), its target PVC name is saved here
             */
            targetPersistentStatePVCName?: pulumi.Input<string>;
            /**
             * The target pod that the VMI is moving to
             */
            targetPod?: pulumi.Input<string>;
        }

        /**
         * Migration configurations to apply
         */
        export interface VirtualMachineInstanceStatusMigrationStateMigrationConfiguration {
            /**
             * AllowAutoConverge allows the platform to compromise performance/availability of VMIs to
             * guarantee successful VMI live migrations. Defaults to false
             */
            allowAutoConverge?: pulumi.Input<boolean>;
            /**
             * AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs
             * to successfully live-migrate. However, events like a network failure can cause a VMI crash.
             * If set to true, migrations will still start in pre-copy, but switch to post-copy when
             * CompletionTimeoutPerGiB triggers. Defaults to false
             */
            allowPostCopy?: pulumi.Input<boolean>;
            /**
             * BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use.
             * The value is in quantity per second. Defaults to 0 (no limit)
             */
            bandwidthPerMigration?: pulumi.Input<number | string>;
            /**
             * CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take.
             * If a live-migration takes longer to migrate than this value multiplied by the size of the VMI,
             * the migration will be cancelled, unless AllowPostCopy is true. Defaults to 150
             */
            completionTimeoutPerGiB?: pulumi.Input<number>;
            /**
             * When set to true, DisableTLS will disable the additional layer of live migration encryption
             * provided by KubeVirt. This is usually a bad idea. Defaults to false
             */
            disableTLS?: pulumi.Input<boolean>;
            /**
             * By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher.
             * When set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target.
             * That will ensure the target virt-launcher doesn't share categories with another pod on the node.
             * However, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels.
             */
            matchSELinuxLevelOnMigration?: pulumi.Input<boolean>;
            /**
             * Network is the name of the CNI network to use for live migrations. By default, migrations go
             * through the pod network.
             */
            network?: pulumi.Input<string>;
            /**
             * NodeDrainTaintKey defines the taint key that indicates a node should be drained.
             * Note: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain
             */
            nodeDrainTaintKey?: pulumi.Input<string>;
            /**
             * ParallelMigrationsPerCluster is the total number of concurrent live migrations
             * allowed cluster-wide. Defaults to 5
             */
            parallelMigrationsPerCluster?: pulumi.Input<number>;
            /**
             * ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations
             * allowed per node. Defaults to 2
             */
            parallelOutboundMigrationsPerNode?: pulumi.Input<number>;
            /**
             * ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress.
             * Hitting this timeout means a migration transferred 0 data for that many seconds. The migration is
             * then considered stuck and therefore cancelled. Defaults to 150
             */
            progressTimeout?: pulumi.Input<number>;
            /**
             * UnsafeMigrationOverride allows live migrations to occur even if the compatibility check
             * indicates the migration will be unsafe to the guest. Defaults to false
             */
            unsafeMigrationOverride?: pulumi.Input<boolean>;
        }

        /**
         * VirtualMachineInstancePhaseTransitionTimestamp gives a timestamp in relation to when a phase is set on a vmi
         */
        export interface VirtualMachineInstanceStatusPhaseTransitionTimestamps {
            /**
             * Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
             */
            phase?: pulumi.Input<string>;
            /**
             * PhaseTransitionTimestamp is the timestamp of when the phase change occurred
             */
            phaseTransitionTimestamp?: pulumi.Input<string>;
        }

        export interface VirtualMachineInstanceStatusTopologyHints {
            tscFrequency?: pulumi.Input<number>;
        }

        /**
         * VolumeStatus represents information about the status of volumes attached to the VirtualMachineInstance.
         */
        export interface VirtualMachineInstanceStatusVolumeStatus {
            containerDiskVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusVolumeStatusContainerDiskVolume>;
            hotplugVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusVolumeStatusHotplugVolume>;
            memoryDumpVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusVolumeStatusMemoryDumpVolume>;
            /**
             * Message is a detailed message about the current hotplug volume phase
             */
            message?: pulumi.Input<string>;
            /**
             * Name is the name of the volume
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaimInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineInstanceStatusVolumeStatusPersistentVolumeClaimInfo>;
            /**
             * Phase is the phase
             */
            phase?: pulumi.Input<string>;
            /**
             * Reason is a brief description of why we are in the current hotplug volume phase
             */
            reason?: pulumi.Input<string>;
            /**
             * Represents the size of the volume
             */
            size?: pulumi.Input<number>;
            /**
             * Target is the target name used when adding the volume to the VM, eg: vda
             */
            target?: pulumi.Input<string>;
        }

        /**
         * ContainerDiskVolume shows info about the containerdisk, if the volume is a containerdisk
         */
        export interface VirtualMachineInstanceStatusVolumeStatusContainerDiskVolume {
            /**
             * Checksum is the checksum of the rootdisk or kernel artifacts inside the containerdisk
             */
            checksum?: pulumi.Input<number>;
        }

        /**
         * If the volume is hotplug, this will contain the hotplug status.
         */
        export interface VirtualMachineInstanceStatusVolumeStatusHotplugVolume {
            /**
             * AttachPodName is the name of the pod used to attach the volume to the node.
             */
            attachPodName?: pulumi.Input<string>;
            /**
             * AttachPodUID is the UID of the pod used to attach the volume to the node.
             */
            attachPodUID?: pulumi.Input<string>;
        }

        /**
         * If the volume is memorydump volume, this will contain the memorydump info.
         */
        export interface VirtualMachineInstanceStatusVolumeStatusMemoryDumpVolume {
            /**
             * ClaimName is the name of the pvc the memory was dumped to
             */
            claimName?: pulumi.Input<string>;
            /**
             * EndTimestamp is the time when the memory dump completed
             */
            endTimestamp?: pulumi.Input<string>;
            /**
             * StartTimestamp is the time when the memory dump started
             */
            startTimestamp?: pulumi.Input<string>;
            /**
             * TargetFileName is the name of the memory dump output
             */
            targetFileName?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimInfo is information about the PVC that handler requires during start flow
         */
        export interface VirtualMachineInstanceStatusVolumeStatusPersistentVolumeClaimInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * Spec contains the specification of VirtualMachineInstance created
         */
        export interface VirtualMachineSpec {
            /**
             * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
             * DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
             */
            dataVolumeTemplates?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplates>[]>;
            instancetype?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecInstancetype>;
            preference?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecPreference>;
            /**
             * Running state indicates the requested running state of the VirtualMachineInstance
             * mutually exclusive with Running
             */
            runStrategy?: pulumi.Input<string>;
            /**
             * Running controls whether the associatied VirtualMachineInstance is created or not
             * Mutually exclusive with RunStrategy
             * Deprecated: VirtualMachineInstance field "Running" is now deprecated, please use RunStrategy instead.
             */
            running?: pulumi.Input<boolean>;
            template?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplate>;
            /**
             * UpdateVolumesStrategy is the strategy to apply on volumes updates
             */
            updateVolumesStrategy?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecDataVolumeTemplates {
            /**
             * APIVersion defines the versioned schema of this representation of an object.
             * Servers should convert recognized schemas to the latest internal value, and
             * may reject unrecognized values.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents.
             * Servers may infer this from the endpoint the client submits requests to.
             * Cannot be updated.
             * In CamelCase.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpec>;
            /**
             * DataVolumeTemplateDummyStatus is here simply for backwards compatibility with
             * a previous API.
             */
            status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineSpecDataVolumeTemplatesPatch {
            /**
             * APIVersion defines the versioned schema of this representation of an object.
             * Servers should convert recognized schemas to the latest internal value, and
             * may reject unrecognized values.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents.
             * Servers may infer this from the endpoint the client submits requests to.
             * Cannot be updated.
             * In CamelCase.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPatch>;
            /**
             * DataVolumeTemplateDummyStatus is here simply for backwards compatibility with
             * a previous API.
             */
            status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * DataVolumeSpec contains the DataVolume specification.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpec {
            /**
             * Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
             */
            checkpoints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecCheckpoints>[]>;
            /**
             * DataVolumeContentType options: "kubevirt", "archive"
             */
            contentType?: pulumi.Input<string>;
            /**
             * FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
             */
            finalCheckpoint?: pulumi.Input<boolean>;
            /**
             * Preallocation controls whether storage for DataVolumes should be allocated in advance.
             */
            preallocation?: pulumi.Input<boolean>;
            /**
             * PriorityClassName for Importer, Cloner and Uploader pod
             */
            priorityClassName?: pulumi.Input<string>;
            pvc?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvc>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSource>;
            sourceRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceRef>;
            storage?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorage>;
        }

        /**
         * DataVolumeCheckpoint defines a stage in a warm migration.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecCheckpoints {
            /**
             * Current is the identifier of the snapshot created for this checkpoint.
             */
            current?: pulumi.Input<string>;
            /**
             * Previous is the identifier of the snapshot from the previous checkpoint.
             */
            previous?: pulumi.Input<string>;
        }

        /**
         * DataVolumeCheckpoint defines a stage in a warm migration.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecCheckpointsPatch {
            /**
             * Current is the identifier of the snapshot created for this checkpoint.
             */
            current?: pulumi.Input<string>;
            /**
             * Previous is the identifier of the snapshot from the previous checkpoint.
             */
            previous?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSpec contains the DataVolume specification.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPatch {
            /**
             * Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
             */
            checkpoints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecCheckpointsPatch>[]>;
            /**
             * DataVolumeContentType options: "kubevirt", "archive"
             */
            contentType?: pulumi.Input<string>;
            /**
             * FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
             */
            finalCheckpoint?: pulumi.Input<boolean>;
            /**
             * Preallocation controls whether storage for DataVolumes should be allocated in advance.
             */
            preallocation?: pulumi.Input<boolean>;
            /**
             * PriorityClassName for Importer, Cloner and Uploader pod
             */
            priorityClassName?: pulumi.Input<string>;
            pvc?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourcePatch>;
            sourceRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceRefPatch>;
            storage?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStoragePatch>;
        }

        /**
         * PVC is the PVC specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvc {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSource>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRef>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcResources>;
            selector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelector>;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * PVC is the PVC specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcResourcesPatch>;
            selector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorPatch>;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Source is the src of the data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSource {
            /**
             * DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
             */
            blank?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            gcs?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceGcs>;
            http?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceHttp>;
            imageio?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceImageio>;
            pvc?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourcePvc>;
            registry?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistry>;
            s3?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceS3>;
            snapshot?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshot>;
            /**
             * DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
             */
            upload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            vddk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceVddk>;
        }

        /**
         * DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceGcs {
            /**
             * SecretRef provides the secret reference needed to access the GCS source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the GCS source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceGcsPatch {
            /**
             * SecretRef provides the secret reference needed to access the GCS source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the GCS source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceHttp {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests
             */
            extraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information
             */
            secretExtraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the http(s) endpoint
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceHttpPatch {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests
             */
            extraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information
             */
            secretExtraHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the http(s) endpoint
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceImageio {
            /**
             * CertConfigMap provides a reference to the CA cert
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * DiskID provides id of a disk to be imported
             */
            diskId?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the ovirt-engine
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the ovirt-engine
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceImageioPatch {
            /**
             * CertConfigMap provides a reference to the CA cert
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * DiskID provides id of a disk to be imported
             */
            diskId?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the ovirt-engine
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the URL of the ovirt-engine
             */
            url?: pulumi.Input<string>;
        }

        /**
         * Source is the src of the data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourcePatch {
            /**
             * DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
             */
            blank?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            gcs?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceGcsPatch>;
            http?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceHttpPatch>;
            imageio?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceImageioPatch>;
            pvc?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourcePvcPatch>;
            registry?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistryPatch>;
            s3?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceS3Patch>;
            snapshot?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshotPatch>;
            /**
             * DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
             */
            upload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            vddk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecSourceVddkPatch>;
        }

        /**
         * DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourcePvc {
            /**
             * The name of the source PVC
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source PVC
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourcePvcPatch {
            /**
             * The name of the source PVC
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source PVC
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SourceRef is an indirect reference to the source of data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRef {
            /**
             * The kind of the source reference, currently only "DataSource" is supported
             */
            kind?: pulumi.Input<string>;
            /**
             * The name of the source reference
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source reference, defaults to the DataVolume namespace
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SourceRef is an indirect reference to the source of data for the requested DataVolume
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRefPatch {
            /**
             * The kind of the source reference, currently only "DataSource" is supported
             */
            kind?: pulumi.Input<string>;
            /**
             * The name of the source reference
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source reference, defaults to the DataVolume namespace
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistry {
            /**
             * CertConfigMap provides a reference to the Registry certs
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ImageStream is the name of image stream for import
             */
            imageStream?: pulumi.Input<string>;
            /**
             * PullMethod can be either "pod" (default import), or "node" (node docker cache based import)
             */
            pullMethod?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the Registry source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the registry source (starting with the scheme: docker, oci-archive)
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceRegistryPatch {
            /**
             * CertConfigMap provides a reference to the Registry certs
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * ImageStream is the name of image stream for import
             */
            imageStream?: pulumi.Input<string>;
            /**
             * PullMethod can be either "pod" (default import), or "node" (node docker cache based import)
             */
            pullMethod?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the Registry source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the registry source (starting with the scheme: docker, oci-archive)
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceS3 {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the S3 source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the S3 source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceS3Patch {
            /**
             * CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
             */
            certConfigMap?: pulumi.Input<string>;
            /**
             * SecretRef provides the secret reference needed to access the S3 source
             */
            secretRef?: pulumi.Input<string>;
            /**
             * URL is the url of the S3 source
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshot {
            /**
             * The name of the source VolumeSnapshot
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source VolumeSnapshot
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceSnapshotPatch {
            /**
             * The name of the source VolumeSnapshot
             */
            name?: pulumi.Input<string>;
            /**
             * The namespace of the source VolumeSnapshot
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceVddk {
            /**
             * BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
             */
            backingFile?: pulumi.Input<string>;
            /**
             * InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
             */
            initImageURL?: pulumi.Input<string>;
            /**
             * SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
             */
            secretRef?: pulumi.Input<string>;
            /**
             * Thumbprint is the certificate thumbprint of the vCenter or ESXi host
             */
            thumbprint?: pulumi.Input<string>;
            /**
             * URL is the URL of the vCenter or ESXi host with the VM to migrate
             */
            url?: pulumi.Input<string>;
            /**
             * UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecSourceVddkPatch {
            /**
             * BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
             */
            backingFile?: pulumi.Input<string>;
            /**
             * InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
             */
            initImageURL?: pulumi.Input<string>;
            /**
             * SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
             */
            secretRef?: pulumi.Input<string>;
            /**
             * Thumbprint is the certificate thumbprint of the vCenter or ESXi host
             */
            thumbprint?: pulumi.Input<string>;
            /**
             * URL is the URL of the vCenter or ESXi host with the VM to migrate
             */
            url?: pulumi.Input<string>;
            /**
             * UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Storage is the requested storage specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorage {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSource>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRef>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageResources>;
            selector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelector>;
            /**
             * Name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         * If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         * If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
         * This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
         * There are two important differences between DataSource and DataSourceRef:
         * * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
         * This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
         * There are two important differences between DataSource and DataSourceRef:
         * * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Storage is the requested storage specification
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStoragePatch {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesPatch>;
            selector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorPatch>;
            /**
             * Name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaims>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name?: pulumi.Input<string>;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request?: pulumi.Input<string>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name?: pulumi.Input<string>;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageResourcesClaimsPatch>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * InstancetypeMatcher references a instancetype that is used to fill fields in Template
         */
        export interface VirtualMachineSpecInstancetype {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype
             * to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which instancetype resource is referenced.
             * Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype".
             * If not specified, "VirtualMachineClusterInstancetype" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially
             * captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * InstancetypeMatcher references a instancetype that is used to fill fields in Template
         */
        export interface VirtualMachineSpecInstancetypePatch {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype
             * to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which instancetype resource is referenced.
             * Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype".
             * If not specified, "VirtualMachineClusterInstancetype" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially
             * captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * Spec contains the specification of VirtualMachineInstance created
         */
        export interface VirtualMachineSpecPatch {
            /**
             * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
             * DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
             */
            dataVolumeTemplates?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecDataVolumeTemplatesPatch>[]>;
            instancetype?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecInstancetypePatch>;
            preference?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecPreferencePatch>;
            /**
             * Running state indicates the requested running state of the VirtualMachineInstance
             * mutually exclusive with Running
             */
            runStrategy?: pulumi.Input<string>;
            /**
             * Running controls whether the associatied VirtualMachineInstance is created or not
             * Mutually exclusive with RunStrategy
             * Deprecated: VirtualMachineInstance field "Running" is now deprecated, please use RunStrategy instead.
             */
            running?: pulumi.Input<boolean>;
            template?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplatePatch>;
            /**
             * UpdateVolumesStrategy is the strategy to apply on volumes updates
             */
            updateVolumesStrategy?: pulumi.Input<string>;
        }

        /**
         * PreferenceMatcher references a set of preference that is used to fill fields in Template
         */
        export interface VirtualMachineSpecPreference {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the preference
             * to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which preference resource is referenced.
             * Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference".
             * If not specified, "VirtualMachineClusterPreference" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is
             * initially captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * PreferenceMatcher references a set of preference that is used to fill fields in Template
         */
        export interface VirtualMachineSpecPreferencePatch {
            /**
             * InferFromVolume lists the name of a volume that should be used to infer or discover the preference
             * to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher
             * this field is removed.
             */
            inferFromVolume?: pulumi.Input<string>;
            /**
             * InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype.
             * Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
             * If not specified, "RejectInferFromVolumeFailure" is used by default.
             */
            inferFromVolumeFailurePolicy?: pulumi.Input<string>;
            /**
             * Kind specifies which preference resource is referenced.
             * Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference".
             * If not specified, "VirtualMachineClusterPreference" is used by default.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference
             */
            name?: pulumi.Input<string>;
            /**
             * RevisionName specifies a ControllerRevision containing a specific copy of the
             * VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is
             * initially captured the first time the instancetype is applied to the VirtualMachineInstance.
             */
            revisionName?: pulumi.Input<string>;
        }

        /**
         * Template is the direct specification of VirtualMachineInstance
         */
        export interface VirtualMachineSpecTemplate {
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpec>;
        }

        /**
         * Template is the direct specification of VirtualMachineInstance
         */
        export interface VirtualMachineSpecTemplatePatch {
            metadata?: pulumi.Input<{[key: string]: any}>;
            spec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecPatch>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineSpecTemplateSpec {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentials>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinity>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDnsConfig>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomain>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbe>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecNetworks>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbe>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTolerations>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTopologySpreadConstraints>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumes>[]>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentials {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKey>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPassword>;
        }

        /**
         * AccessCredential represents a credential source that can be used to
         * authorize remote access to the vm guest
         * Only one of its members may be specified.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsPatch {
            sshPublicKey?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPatch>;
            userPassword?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPatch>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKey {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySource>;
        }

        /**
         * SSHPublicKey represents the source and method of applying a ssh public
         * key into a guest virtual machine.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourcePatch>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent>;
        }

        /**
         * PropagationMethod represents how the public key is injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodPatch {
            /**
             * ConfigDrivePropagation means that the ssh public keys are injected
             * into the VM using metadata using the configDrive cloud-init provider
             */
            configDrive?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * NoCloudPropagation means that the ssh public keys are injected
             * into the VM using metadata using the noCloud cloud-init provider
             */
            noCloud?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            qemuGuestAgent?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * QemuGuestAgentAccessCredentailPropagation means ssh public keys are
         * dynamically injected into the vm at runtime via the qemu guest agent.
         * This feature requires the qemu guest agent to be running within the guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgentPatch {
            /**
             * Users represents a list of guest users that should have the ssh public keys
             * added to their authorized_keys file.
             */
            users?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySource {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecret>;
        }

        /**
         * Source represents where the public keys are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPassword {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethod>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSource>;
        }

        /**
         * UserPassword represents the source and method for applying a guest user's
         * password
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPatch {
            propagationMethod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethodPatch>;
            source?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourcePatch>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethod {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * propagationMethod represents how the user passwords are injected into the vm guest.
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethodPatch {
            /**
             * QemuGuestAgentAccessCredentailPropagation means passwords are
             * dynamically injected into the vm at runtime via the qemu guest agent.
             * This feature requires the qemu guest agent to be running within the guest.
             */
            qemuGuestAgent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSource {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecret>;
        }

        /**
         * Source represents where the user passwords are pulled from
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourcePatch {
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecretPatch>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecret {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Secret means that the access credential is pulled from a kubernetes secret
         */
        export interface VirtualMachineSpecTemplateSpecAccessCredentialsUserPasswordSourceSecretPatch {
            /**
             * SecretName represents the name of the secret in the VMI's namespace
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineSpecTemplateSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinity>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator?: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        /**
         * If affinity is specifies, obey all the affinity rules
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPatch>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            namespaceSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDnsConfigOptions>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfigOptions {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface VirtualMachineSpecTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDnsConfigOptionsPatch>[]>;
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineSpecTemplateSpecDomain {
            chassis?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainChassis>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpu>;
            devices?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevices>;
            features?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeatures>;
            firmware?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmware>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainLaunchSecurity>;
            machine?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainMachine>;
            memory?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainMemory>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainResources>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineSpecTemplateSpecDomainChassis {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Chassis specifies the chassis info passed to the domain.
         */
        export interface VirtualMachineSpecTemplateSpecDomainChassisPatch {
            asset?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            serial?: pulumi.Input<string>;
            sku?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpu {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuFeatures>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuNuma>;
            realtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuRealtime>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuFeatures {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * CPUFeature allows specifying a CPU feature.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuFeaturesPatch {
            /**
             * Name of the CPU feature
             */
            name?: pulumi.Input<string>;
            /**
             * Policy is the CPU feature attribute which can have the following attributes:
             * force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
             * require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
             * optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
             * disable  - The feature will not be supported by virtual CPU.
             * forbid   - Guest creation will fail if the feature is supported by host CPU.
             * Defaults to require
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuNuma {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NUMA allows specifying settings for the guest NUMA topology
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuNumaPatch {
            /**
             * GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
             * The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
             */
            guestMappingPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CPU allow specified the detailed CPU topology inside the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuPatch {
            /**
             * Cores specifies the number of cores inside the vmi.
             * Must be a value greater or equal 1.
             */
            cores?: pulumi.Input<number>;
            /**
             * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
             * with enough dedicated pCPUs and pin the vCPUs to it.
             */
            dedicatedCpuPlacement?: pulumi.Input<boolean>;
            /**
             * Features specifies the CPU features list inside the VMI.
             */
            features?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuFeaturesPatch>[]>;
            /**
             * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
             * the emulator thread on it.
             */
            isolateEmulatorThread?: pulumi.Input<boolean>;
            /**
             * MaxSockets specifies the maximum amount of sockets that can
             * be hotplugged
             */
            maxSockets?: pulumi.Input<number>;
            /**
             * Model specifies the CPU model inside the VMI.
             * List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
             * It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
             * and "host-model" to get CPU closest to the node one.
             * Defaults to host-model.
             */
            model?: pulumi.Input<string>;
            numa?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuNumaPatch>;
            realtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuRealtimePatch>;
            /**
             * Sockets specifies the number of sockets inside the vmi.
             * Must be a value greater or equal 1.
             */
            sockets?: pulumi.Input<number>;
            /**
             * Threads specifies the number of threads inside the vmi.
             * Must be a value greater or equal 1.
             */
            threads?: pulumi.Input<number>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuRealtime {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
         */
        export interface VirtualMachineSpecTemplateSpecDomainCpuRealtimePatch {
            /**
             * Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
             * Example: "0-3,^1","0,2,3","2-3"
             */
            mask?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevices {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisks>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesFilesystems>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpus>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesHostDevices>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInputs>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfaces>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesSound>;
            tpm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesTpm>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesWatchdog>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisks {
            blockSize?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSize>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksCdrom>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksDisk>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksLun>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSize {
            custom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustom>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolume>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustom {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustomPatch {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolume {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolumePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizePatch {
            custom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeCustomPatch>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolumePatch>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksCdrom {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksCdromPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksDisk {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksDiskPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksLun {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksLunPatch {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesDisksPatch {
            blockSize?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksBlockSizePatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksCdromPatch>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksDiskPatch>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksLunPatch>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesFilesystems {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesFilesystemsPatch {
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Virtiofs is supported
             */
            virtiofs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpus {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptions>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusPatch {
            deviceName?: pulumi.Input<string>;
            /**
             * Name of the GPU device as exposed by a device plugin
             */
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
            virtualGPUOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsPatch>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptions {
            display?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplay>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplay {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch {
            /**
             * Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            ramFB?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFB {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Enables a boot framebuffer, until the guest OS loads a real GPU driver
         * Defaults to true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayRamFBPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsPatch {
            display?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusVirtualGPUOptionsDisplayPatch>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesHostDevices {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesHostDevicesPatch {
            /**
             * DeviceName is the resource name of the host device exposed by a device plugin
             */
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInputs {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInputsPatch {
            /**
             * Bus indicates the bus of input device to emulate.
             * Supported values: virtio, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Type indicated the type of input device.
             * Supported values: tablet.
             */
            type?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfaces {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBinding>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptions>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPorts>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBinding {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Binding specifies the binding plugin that will be used to connect the interface to the guest.
         * It provides an alternative to InterfaceBindingMethod.
         * version: 1alphav1
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBindingPatch {
            /**
             * Name references to the binding name as denined in the kubevirt CR.
             * version: 1alphav1
             */
            name?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptions {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * If specified the network interface will pass additional DHCP options to the VMI
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPatch {
            /**
             * If specified will pass option 67 to interface's DHCP server
             */
            bootFileName?: pulumi.Input<string>;
            /**
             * If specified will pass the configured NTP server to the VM via DHCP option 042.
             */
            ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified will pass extra DHCP options for private use, range: 224-254
             */
            privateOptions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch>[]>;
            /**
             * If specified will pass option 66 to interface's DHCP server
             */
            tftpServerName?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * DHCPExtraOptions defines Extra DHCP options for a VM.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptionsPatch {
            /**
             * Option is an Integer value from 224-254
             * Required.
             */
            option?: pulumi.Input<number>;
            /**
             * Value is a String value for the Option provided
             * Required.
             */
            value?: pulumi.Input<string>;
        }

        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPatch {
            /**
             * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
             * in PCI addresses assigned to the device.
             * This value is required to be unique across all devices and be between 1 and (16*1024-1).
             */
            acpiIndex?: pulumi.Input<number>;
            binding?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesBindingPatch>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each interface or disk that has a boot order must have a unique value.
             * Interfaces without a boot order are not tried.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * InterfaceBridge connects to a given network via a linux bridge.
             */
            bridge?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            dhcpOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPatch>;
            /**
             * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
             */
            macAddress?: pulumi.Input<string>;
            /**
             * DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            macvtap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
             */
            masquerade?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Interface model.
             * One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio.
             * Defaults to virtio.
             */
            model?: pulumi.Input<string>;
            /**
             * Logical name of the interface as well as a reference to the associated networks.
             * Must match the Name of a Network.
             */
            name?: pulumi.Input<string>;
            /**
             * DeprecatedPasst is an alias to the deprecated Passt interface,
             * please refer to Kubevirt user guide for alternatives.
             * Deprecated: Removed in v1.3
             */
            passt?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * List of ports to be forwarded to the virtual machine.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPortsPatch>[]>;
            /**
             * DeprecatedSlirp is an alias to the deprecated Slirp interface
             * Deprecated: Removed in v1.3
             */
            slirp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
             */
            sriov?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * State represents the requested operational state of the interface.
             * The (only) value supported is 'absent', expressing a request to remove the interface.
             */
            state?: pulumi.Input<string>;
            /**
             * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPorts {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Port represents a port to expose from the virtual machine.
         * Default protocol TCP.
         * The port field is mandatory
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPortsPatch {
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Number of port to expose for the virtual machine.
             * This must be a valid port number, 0 < x < 65536.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol for port. Must be UDP or TCP.
             * Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Devices allows adding disks, network interfaces, and others
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesPatch {
            /**
             * Whether to attach the default graphics device or not.
             * VNC will not be available if set to false. Defaults to true.
             */
            autoattachGraphicsDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach an Input Device.
             * Defaults to false.
             */
            autoattachInputDevice?: pulumi.Input<boolean>;
            /**
             * Whether to attach the Memory balloon device with default period.
             * Period can be adjusted in virt-config.
             * Defaults to true.
             */
            autoattachMemBalloon?: pulumi.Input<boolean>;
            /**
             * Whether to attach a pod network interface. Defaults to true.
             */
            autoattachPodInterface?: pulumi.Input<boolean>;
            /**
             * Whether to attach the default virtio-serial console or not.
             * Serial console access will not be available if set to false. Defaults to true.
             */
            autoattachSerialConsole?: pulumi.Input<boolean>;
            /**
             * Whether to attach the VSOCK CID to the VM or not.
             * VSOCK access will be available if set to true. Defaults to false.
             */
            autoattachVSOCK?: pulumi.Input<boolean>;
            /**
             * Whether or not to enable virtio multi-queue for block devices.
             * Defaults to false.
             */
            blockMultiQueue?: pulumi.Input<boolean>;
            /**
             * To configure and access client devices such as redirecting USB
             */
            clientPassthrough?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * DisableHotplug disabled the ability to hotplug disks.
             */
            disableHotplug?: pulumi.Input<boolean>;
            /**
             * Disks describes disks, cdroms and luns which are connected to the vmi.
             */
            disks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesDisksPatch>[]>;
            /**
             * DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Filesystems describes filesystem which is connected to the vmi.
             */
            filesystems?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesFilesystemsPatch>[]>;
            /**
             * Whether to attach a GPU device to the vmi.
             */
            gpus?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesGpusPatch>[]>;
            /**
             * Whether to attach a host device to the vmi.
             */
            hostDevices?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesHostDevicesPatch>[]>;
            /**
             * Inputs describe input devices
             */
            inputs?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInputsPatch>[]>;
            /**
             * Interfaces describe network interfaces which are added to the vmi.
             */
            interfaces?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesInterfacesPatch>[]>;
            /**
             * Whether to log the auto-attached default serial console or not.
             * Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'.
             * Not relevant if autoattachSerialConsole is disabled.
             * Defaults to cluster wide setting on VirtualMachineOptions.
             */
            logSerialConsole?: pulumi.Input<boolean>;
            /**
             * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
             */
            networkInterfaceMultiqueue?: pulumi.Input<boolean>;
            /**
             * Whether to have random number generator from host
             */
            rng?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sound?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesSoundPatch>;
            tpm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesTpmPatch>;
            /**
             * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
             * This is helpful for old machines like CentOS6 or RHEL6 which
             * do not understand virtio_non_transitional (virtio 1.0).
             */
            useVirtioTransitional?: pulumi.Input<boolean>;
            watchdog?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesWatchdogPatch>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesSound {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a sound device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesSoundPatch {
            /**
             * We only support ich9 or ac97.
             * If SoundDevice is not set: No sound card is emulated.
             * If SoundDevice is set but Model is not: ich9
             */
            model?: pulumi.Input<string>;
            /**
             * User's defined name for this sound device
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesTpm {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Whether to emulate a TPM device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesTpmPatch {
            /**
             * Persistent indicates the state of the TPM device should be kept accross reboots
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdog {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esb>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esb {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * i6300esb watchdog device.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esbPatch {
            /**
             * The action to take. Valid values are poweroff, reset, shutdown.
             * Defaults to reset.
             */
            action?: pulumi.Input<string>;
        }

        /**
         * Watchdog describes a watchdog device which can be added to the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainDevicesWatchdogPatch {
            i6300esb?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesWatchdogI6300esbPatch>;
            /**
             * Name of the watchdog.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeatures {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesAcpi>;
            apic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesApic>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHyperv>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthrough>;
            kvm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesKvm>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlock>;
            smm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesSmm>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesAcpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * ACPI enables/disables ACPI inside the guest.
         * Defaults to enabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesAcpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesApic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesApicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * EndOfInterrupt enables the end of interrupt notification in the guest.
             * Defaults to false.
             */
            endOfInterrupt?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHyperv {
            evmcs?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcs>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequencies>;
            ipi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpi>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenment>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxed>;
            reset?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervReset>;
            runtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntime>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocks>;
            synic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynic>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimer>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflush>;
            vapic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapic>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendorid>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindex>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcs {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcsPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequencies {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Frequencies improves the TSC clock source handling for Hyper-V on KVM.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequenciesPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpi {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * IPI improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpiPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthrough {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * This enables all supported hyperv flags automatically.
         * Bear in mind that if this enabled hyperV features cannot
         * be enabled explicitly. In addition, a Virtual Machine
         * using it will be non-migratable.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthroughPatch {
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervPatch {
            evmcs?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervEvmcsPatch>;
            frequencies?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervFrequenciesPatch>;
            ipi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervIpiPatch>;
            reenlightenment?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenmentPatch>;
            relaxed?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxedPatch>;
            reset?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervResetPatch>;
            runtime?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntimePatch>;
            spinlocks?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocksPatch>;
            synic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynicPatch>;
            synictimer?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerPatch>;
            tlbflush?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflushPatch>;
            vapic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapicPatch>;
            vendorid?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendoridPatch>;
            vpindex?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindexPatch>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenment {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reenlightenment enables the notifications on TSC frequency changes.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervReenlightenmentPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxed {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Relaxed instructs the guest OS to disable watchdog timeouts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRelaxedPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervReset {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Reset enables Hyperv reboot/reset for the vmi. Requires synic.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervResetPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntime {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Runtime improves the time accounting to improve scheduling in the guest.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervRuntimePatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocks {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * Spinlocks allows to configure the spinlock retry attempts.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSpinlocksPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Retries indicates the number of retries.
             * Must be a value greater or equal 4096.
             * Defaults to 4096.
             */
            spinlocks?: pulumi.Input<number>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNIC enables the Synthetic Interrupt Controller.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimer {
            direct?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirect>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirect {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirectPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerPatch {
            direct?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervSynictimerDirectPatch>;
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflush {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * TLBFlush improves performances in overcommited environments. Requires vpindex.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervTlbflushPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapic {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VAPIC improves the paravirtualized handling of interrupts.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVapicPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendorid {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VendorID allows setting the hypervisor vendor id.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVendoridPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * VendorID sets the hypervisor vendor id, visible to the vmi.
             * String up to twelve characters.
             */
            vendorid?: pulumi.Input<string>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindex {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
         * Defaults to the machine type setting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesHypervVpindexPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesKvm {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Configure how KVM presence is exposed to the guest.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesKvmPatch {
            /**
             * Hide the KVM hypervisor from standard MSR based discovery.
             * Defaults to false
             */
            hidden?: pulumi.Input<boolean>;
        }

        /**
         * Features like acpi, apic, hyperv, smm.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesPatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesAcpiPatch>;
            apic?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesApicPatch>;
            hyperv?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervPatch>;
            hypervPassthrough?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesHypervPassthroughPatch>;
            kvm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesKvmPatch>;
            pvspinlock?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlockPatch>;
            smm?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesSmmPatch>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlock {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Notify the guest that the host supports paravirtual spinlocks.
         * For older kernels this feature should be explicitly disabled.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesPvspinlockPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesSmm {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * SMM enables/disables System Management Mode.
         * TSEG not yet implemented.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFeaturesSmmPatch {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmware {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareAcpi>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareBootloader>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBoot>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareAcpi {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Information that can be set in the ACPI table
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareAcpiPatch {
            /**
             * SlicNameRef should match the volume name of a secret object. The data in the secret should
             * be a binary blob that follows the ACPI SLIC standard, see:
             * https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)
             */
            slicNameRef?: pulumi.Input<string>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloader {
            bios?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBios>;
            efi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfi>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBios {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set (default), BIOS will be used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBiosPatch {
            /**
             * If set, the BIOS output will be transmitted over serial
             */
            useSerial?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfi {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * If set, EFI will be used instead of BIOS.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfiPatch {
            /**
             * If set to true, Persistent will persist the EFI NVRAM across reboots.
             * Defaults to false
             */
            persistent?: pulumi.Input<boolean>;
            /**
             * If set, SecureBoot will be enabled and the OVMF roms will be swapped for
             * SecureBoot-enabled ones.
             * Requires SMM to be enabled.
             * Defaults to true
             */
            secureBoot?: pulumi.Input<boolean>;
        }

        /**
         * Settings to control the bootloader that is used.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderPatch {
            bios?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderBiosPatch>;
            efi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderEfiPatch>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBoot {
            container?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainer>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainer {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Container defines the container that containes kernel artifacts
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainerPatch {
            /**
             * Image that contains initrd / kernel files.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * the fully-qualified path to the ramdisk image in the host OS
             */
            initrdPath?: pulumi.Input<string>;
            /**
             * The fully-qualified path to the kernel image in the host OS
             */
            kernelPath?: pulumi.Input<string>;
        }

        /**
         * Settings to set the kernel for booting.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootPatch {
            container?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootContainerPatch>;
            /**
             * Arguments to be passed to the kernel at boot time
             */
            kernelArgs?: pulumi.Input<string>;
        }

        /**
         * Firmware.
         */
        export interface VirtualMachineSpecTemplateSpecDomainFirmwarePatch {
            acpi?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareAcpiPatch>;
            bootloader?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareBootloaderPatch>;
            kernelBoot?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwareKernelBootPatch>;
            /**
             * The system-serial-number in SMBIOS
             */
            serial?: pulumi.Input<string>;
            /**
             * UUID reported by the vmi bios.
             * Defaults to a random generated uid.
             */
            uuid?: pulumi.Input<string>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecurity {
            sev?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySev>;
        }

        /**
         * Launch Security setting of the vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecurityPatch {
            sev?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPatch>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySev {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicy>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * AMD Secure Encrypted Virtualization (SEV).
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPatch {
            /**
             * If specified, run the attestation process for a vmi.
             */
            attestation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Base64 encoded guest owner's Diffie-Hellman key.
             */
            dhCert?: pulumi.Input<string>;
            policy?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicyPatch>;
            /**
             * Base64 encoded session blob.
             */
            session?: pulumi.Input<string>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicy {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Guest policy flags as defined in AMD SEV API specification.
         * Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
         */
        export interface VirtualMachineSpecTemplateSpecDomainLaunchSecuritySevPolicyPatch {
            /**
             * SEV-ES is required.
             * Defaults to false.
             */
            encryptedState?: pulumi.Input<boolean>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMachine {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Machine type.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMachinePatch {
            /**
             * QEMU machine type is the actual chipset of the VirtualMachineInstance.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemory {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainMemoryHugepages>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemoryHugepages {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemoryHugepagesPatch {
            /**
             * PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
             */
            pageSize?: pulumi.Input<string>;
        }

        /**
         * Memory allow specifying the VMI memory features.
         */
        export interface VirtualMachineSpecTemplateSpecDomainMemoryPatch {
            /**
             * Guest allows to specifying the amount of memory which is visible inside the Guest OS.
             * The Guest must lie between Requests and Limits from the resources section.
             * Defaults to the requested memory in the resources section if not specified.
             */
            guest?: pulumi.Input<number | string>;
            hugepages?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainMemoryHugepagesPatch>;
            /**
             * MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
             * The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged.
             */
            maxGuest?: pulumi.Input<number | string>;
        }

        /**
         * Specification of the desired behavior of the VirtualMachineInstance on the host.
         */
        export interface VirtualMachineSpecTemplateSpecDomainPatch {
            chassis?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainChassisPatch>;
            /**
             * Clock sets the clock and timers of the vmi.
             */
            clock?: pulumi.Input<{[key: string]: any}>;
            cpu?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainCpuPatch>;
            devices?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainDevicesPatch>;
            features?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFeaturesPatch>;
            firmware?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainFirmwarePatch>;
            /**
             * Controls whether or not disks will share IOThreads.
             * Omitting IOThreadsPolicy disables use of IOThreads.
             * One of: shared, auto
             */
            ioThreadsPolicy?: pulumi.Input<string>;
            launchSecurity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainLaunchSecurityPatch>;
            machine?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainMachinePatch>;
            memory?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainMemoryPatch>;
            resources?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainResourcesPatch>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Resources describes the Compute Resources required by this vmi.
         */
        export interface VirtualMachineSpecTemplateSpecDomainResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * Valid resource keys are "memory" and "cpu".
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Don't ask the scheduler to take the guest-management overhead into account. Instead
             * put the overhead only into the container's memory limit. This can lead to crashes if
             * all memory is in use on a node. Defaults to false.
             */
            overcommitGuestOverhead?: pulumi.Input<boolean>;
            /**
             * Requests is a description of the initial vmi resources.
             * Valid resource keys are "memory" and "cpu".
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance liveness.
         * VirtualmachineInstances will be stopped if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineSpecTemplateSpecNetworks {
            multus?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecNetworksMultus>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecNetworksPod>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksMultus {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Represents the multus cni network.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksMultusPatch {
            /**
             * Select the default network and add it to the
             * multus-cni.io/default-network annotation.
             */
            default?: pulumi.Input<boolean>;
            /**
             * References to a NetworkAttachmentDefinition CRD object. Format:
             * <networkName>, <namespace>/<networkName>. If namespace is not
             * specified, VMI namespace is assumed.
             */
            networkName?: pulumi.Input<string>;
        }

        /**
         * Network represents a network type and a resource that should be connected to the vm.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksPatch {
            multus?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecNetworksMultusPatch>;
            /**
             * Network name.
             * Must be a DNS_LABEL and unique within the vm.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            pod?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecNetworksPodPatch>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksPod {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * Represents the stock pod network interface.
         */
        export interface VirtualMachineSpecTemplateSpecNetworksPodPatch {
            /**
             * IPv6 CIDR for the vm network.
             * Defaults to fd10:0:2::/120 if not specified.
             */
            vmIPv6NetworkCIDR?: pulumi.Input<string>;
            /**
             * CIDR for vm network.
             * Default 10.0.2.0/24 if not specified.
             */
            vmNetworkCIDR?: pulumi.Input<string>;
        }

        /**
         * VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
         */
        export interface VirtualMachineSpecTemplateSpecPatch {
            /**
             * Specifies a set of public keys to inject into the vm guest
             */
            accessCredentials?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAccessCredentialsPatch>[]>;
            affinity?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecAffinityPatch>;
            /**
             * Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
             */
            architecture?: pulumi.Input<string>;
            dnsConfig?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDnsConfigPatch>;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            domain?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecDomainPatch>;
            /**
             * EvictionStrategy describes the strategy to follow when a node drain occurs.
             * The possible options are:
             * - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
             * - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
             * - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
             * - "External": the VirtualMachineInstance will be protected by a PDB and 'vmi.Status.EvacuationNodeName' will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa.
             */
            evictionStrategy?: pulumi.Input<string>;
            /**
             * Specifies the hostname of the vmi
             * If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
             */
            hostname?: pulumi.Input<string>;
            livenessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecLivenessProbePatch>;
            /**
             * List of networks that can be attached to a vm's virtual interface.
             */
            networks?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecNetworksPatch>[]>;
            /**
             * NodeSelector is a selector which must be true for the vmi to fit on a node.
             * Selector which must match a node's labels for the vmi to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, indicates the pod's priority.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName?: pulumi.Input<string>;
            readinessProbe?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbePatch>;
            /**
             * If specified, the VMI will be dispatched by specified scheduler.
             * If not specified, the VMI will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
             */
            startStrategy?: pulumi.Input<string>;
            /**
             * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
             * no matter if the vmi itself can pick up a hostname.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If toleration is specified, obey all the toleration rules.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTolerationsPatch>[]>;
            /**
             * TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
             * domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsPatch>[]>;
            /**
             * List of volumes that can be mounted by disks belonging to the vmi.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesPatch>[]>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbe {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeHttpGet>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * One and only one of the following should be specified.
         * Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
         * If the guest agent is not available, this probe will fail.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name?: pulumi.Input<string>;
            /**
             * The header field value
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeHttpGetHttpHeadersPatch>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of VirtualMachineInstance service readiness.
         * VirtualmachineInstances will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbePatch {
            exec?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeExecPatch>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GuestAgentPing contacts the qemu-guest-agent for availability checks.
             */
            guestAgentPing?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            httpGet?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeHttpGetPatch>;
            /**
             * Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecReadinessProbeTcpSocketPatch>;
            /**
             * Number of seconds after which the probe times out.
             * For exec probes the timeout fails the probe but does not terminate the command running on the guest.
             * This means a blocking command can result in an increasing load on the guest.
             * A small buffer will be added to the resulting workload exec probe to compensate for delays
             * caused by the qemu guest exec mechanism.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         * TCP hooks not yet supported
         */
        export interface VirtualMachineSpecTemplateSpecReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port?: pulumi.Input<number | string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineSpecTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface VirtualMachineSpecTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraints {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelector>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface VirtualMachineSpecTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew?: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable?: pulumi.Input<string>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineSpecTemplateSpecVolumes {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrive>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloud>;
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesConfigMap>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesContainerDisk>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDataVolume>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPI>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesEmptyDisk>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesEphemeral>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesHostDisk>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesMemoryDump>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaim>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSecret>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesServiceAccount>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSysprep>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrive {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRef>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
         * The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrivePatch {
            /**
             * NetworkData contains config drive inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRefPatch>;
            /**
             * UserData contains config drive inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains config drive userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDriveSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloud {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRef>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CloudInitNoCloud represents a cloud-init NoCloud user-data source.
         * The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
         * More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudPatch {
            /**
             * NetworkData contains NoCloud inline cloud-init networkdata.
             */
            networkData?: pulumi.Input<string>;
            /**
             * NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
             */
            networkDataBase64?: pulumi.Input<string>;
            networkDataSecretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRefPatch>;
            secretRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRefPatch>;
            /**
             * UserData contains NoCloud inline cloud-init userdata.
             */
            userData?: pulumi.Input<string>;
            /**
             * UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
             */
            userDataBase64?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * UserDataSecretRef references a k8s secret that contains NoCloud userdata.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ConfigMapSource represents a reference to a ConfigMap in the same namespace.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesContainerDisk {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ContainerDisk references a docker image, embedding a qcow or raw disk.
         * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesContainerDiskPatch {
            /**
             * Image is the name of the image with the embedded disk.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
             */
            imagePullSecret?: pulumi.Input<string>;
            /**
             * Path defines the path to disk file in the container
             */
            path?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDataVolume {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDataVolumePatch {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPI {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFields>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFields {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRef>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRef>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath?: pulumi.Input<string>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsPatch {
            fieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsFieldRefPatch>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRefPatch>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface VirtualMachineSpecTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Fields is a list of downward API volume file
             */
            fields?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIFieldsPatch>[]>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEmptyDisk {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
         * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEmptyDiskPatch {
            /**
             * Capacity of the sparse disk.
             */
            capacity?: pulumi.Input<number | string>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeral {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaim>;
        }

        /**
         * Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeralPatch {
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaimPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesEphemeralPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineSpecTemplateSpecVolumesHostDisk {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HostDisk represents a disk created on the cluster level
         */
        export interface VirtualMachineSpecTemplateSpecVolumesHostDiskPatch {
            /**
             * Capacity of the sparse disk
             */
            capacity?: pulumi.Input<number | string>;
            /**
             * The path to HostDisk image located on the cluster
             */
            path?: pulumi.Input<string>;
            /**
             * Shared indicate whether the path is shared between nodes
             */
            shared?: pulumi.Input<boolean>;
            /**
             * Contains information if disk.img exists or should be created
             * allowed options are 'Disk' and 'DiskOrCreate'
             */
            type?: pulumi.Input<string>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineSpecTemplateSpecVolumesMemoryDump {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
         */
        export interface VirtualMachineSpecTemplateSpecVolumesMemoryDumpPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * Volume represents a named volume in a vmi.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesPatch {
            cloudInitConfigDrive?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitConfigDrivePatch>;
            cloudInitNoCloud?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesCloudInitNoCloudPatch>;
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesConfigMapPatch>;
            containerDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesContainerDiskPatch>;
            dataVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDataVolumePatch>;
            downwardAPI?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesDownwardAPIPatch>;
            /**
             * DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
             * metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
             */
            downwardMetrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            emptyDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesEmptyDiskPatch>;
            ephemeral?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesEphemeralPatch>;
            hostDisk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesHostDiskPatch>;
            memoryDump?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesMemoryDumpPatch>;
            /**
             * Volume's name.
             * Must be a DNS_LABEL and unique within the vmi.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaimPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSecretPatch>;
            serviceAccount?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesServiceAccountPatch>;
            sysprep?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSysprepPatch>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineSpecTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSecret {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * SecretVolumeSource represents a reference to a secret data in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/configuration/secret/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSecretPatch {
            /**
             * Specify whether the Secret or it's keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
            /**
             * The volume label of the resulting disk inside the VMI.
             * Different bootstrapping mechanisms require different values.
             * Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
             */
            volumeLabel?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesServiceAccount {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * ServiceAccountVolumeSource represents a reference to a service account.
         * There can only be one volume of this type!
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        export interface VirtualMachineSpecTemplateSpecVolumesServiceAccountPatch {
            /**
             * Name of the service account in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprep {
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSysprepConfigMap>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSysprepSecret>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepConfigMap {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepConfigMapPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Represents a Sysprep volume source.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepPatch {
            configMap?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSysprepConfigMapPatch>;
            secret?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineSpecTemplateSpecVolumesSysprepSecretPatch>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepSecret {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
         */
        export interface VirtualMachineSpecTemplateSpecVolumesSysprepSecretPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status holds the current state of the controller and brief information
         * about its associated VirtualMachineInstance
         */
        export interface VirtualMachineStatus {
            /**
             * Hold the state information of the VirtualMachine and its VirtualMachineInstance
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusConditions>[]>;
            /**
             * Created indicates if the virtual machine is created in the cluster
             */
            created?: pulumi.Input<boolean>;
            /**
             * DesiredGeneration is the generation which is desired for the VMI.
             * This will be used in comparisons with ObservedGeneration to understand when
             * the VMI is out of sync. This will be changed at the same time as
             * ObservedGeneration to remove errors which could occur if Generation is
             * updated through an Update() before ObservedGeneration in Status.
             */
            desiredGeneration?: pulumi.Input<number>;
            memoryDumpRequest?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusMemoryDumpRequest>;
            /**
             * ObservedGeneration is the generation observed by the vmi when started.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * PrintableStatus is a human readable, high-level representation of the status of the virtual machine
             */
            printableStatus?: pulumi.Input<string>;
            /**
             * Ready indicates if the virtual machine is running and ready
             */
            ready?: pulumi.Input<boolean>;
            /**
             * RestoreInProgress is the name of the VirtualMachineRestore currently executing
             */
            restoreInProgress?: pulumi.Input<string>;
            /**
             * RunStrategy tracks the last recorded RunStrategy used by the VM.
             * This is needed to correctly process the next strategy (for now only the RerunOnFailure)
             */
            runStrategy?: pulumi.Input<string>;
            /**
             * SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing
             */
            snapshotInProgress?: pulumi.Input<string>;
            startFailure?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusStartFailure>;
            /**
             * StateChangeRequests indicates a list of actions that should be taken on a VMI
             * e.g. stop a specific VMI then start a new one.
             */
            stateChangeRequests?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusStateChangeRequests>[]>;
            /**
             * VolumeRequests indicates a list of volumes add or remove from the VMI template and
             * hotplug on an active running VMI.
             */
            volumeRequests?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequests>[]>;
            /**
             * VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is
             * supported by each volume.
             */
            volumeSnapshotStatuses?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeSnapshotStatuses>[]>;
            volumeUpdateState?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeUpdateState>;
        }

        /**
         * VirtualMachineCondition represents the state of VirtualMachine
         */
        export interface VirtualMachineStatusConditions {
            lastProbeTime?: pulumi.Input<string>;
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        /**
         * MemoryDumpRequest tracks memory dump request phase and info of getting a memory
         * dump to the given pvc
         */
        export interface VirtualMachineStatusMemoryDumpRequest {
            /**
             * ClaimName is the name of the pvc that will contain the memory dump
             */
            claimName?: pulumi.Input<string>;
            /**
             * EndTimestamp represents the time the memory dump was completed
             */
            endTimestamp?: pulumi.Input<string>;
            /**
             * FileName represents the name of the output file
             */
            fileName?: pulumi.Input<string>;
            /**
             * Message is a detailed message about failure of the memory dump
             */
            message?: pulumi.Input<string>;
            /**
             * Phase represents the memory dump phase
             */
            phase?: pulumi.Input<string>;
            /**
             * Remove represents request of dissociating the memory dump pvc
             */
            remove?: pulumi.Input<boolean>;
            /**
             * StartTimestamp represents the time the memory dump started
             */
            startTimestamp?: pulumi.Input<string>;
        }

        /**
         * StartFailure tracks consecutive VMI startup failures for the purposes of
         * crash loop backoffs
         */
        export interface VirtualMachineStatusStartFailure {
            consecutiveFailCount?: pulumi.Input<number>;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            lastFailedVMIUID?: pulumi.Input<string>;
            retryAfterTimestamp?: pulumi.Input<string>;
        }

        export interface VirtualMachineStatusStateChangeRequests {
            /**
             * Indicates the type of action that is requested. e.g. Start or Stop
             */
            action?: pulumi.Input<string>;
            /**
             * Provides additional data in order to perform the Action
             */
            data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable
             */
            uid?: pulumi.Input<string>;
        }

        export interface VirtualMachineStatusVolumeRequests {
            addVolumeOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptions>;
            removeVolumeOptions?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsRemoveVolumeOptions>;
        }

        /**
         * AddVolumeOptions when set indicates a volume should be added. The details
         * within this field specify how to add the volume
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptions {
            disk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDisk>;
            /**
             * When present, indicates that modifications should not be
             * persisted. An invalid or unrecognized dryRun directive will
             * result in an error response and no further processing of the
             * request. Valid values are:
             * - All: all dry run stages will be processed
             */
            dryRun?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name represents the name that will be used to map the
             * disk to the corresponding volume. This overrides any name
             * set inside the Disk struct itself.
             */
            name?: pulumi.Input<string>;
            volumeSource?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSource>;
        }

        /**
         * Disk represents the hotplug disk that will be plugged into the running VMI
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDisk {
            blockSize?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSize>;
            /**
             * BootOrder is an integer value > 0, used to determine ordering of boot devices.
             * Lower values take precedence.
             * Each disk or interface that has a boot order must have a unique value.
             * Disks without a boot order are not tried if a disk with a boot order exists.
             */
            bootOrder?: pulumi.Input<number>;
            /**
             * Cache specifies which kvm disk cache mode should be used.
             * Supported values are: CacheNone, CacheWriteThrough.
             */
            cache?: pulumi.Input<string>;
            cdrom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskCdrom>;
            /**
             * dedicatedIOThread indicates this disk should have an exclusive IO Thread.
             * Enabling this implies useIOThreads = true.
             * Defaults to false.
             */
            dedicatedIOThread?: pulumi.Input<boolean>;
            disk?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskDisk>;
            /**
             * If specified, it can change the default error policy (stop) for the disk
             */
            errorPolicy?: pulumi.Input<string>;
            /**
             * IO specifies which QEMU disk IO mode should be used.
             * Supported values are: native, default, threads.
             */
            io?: pulumi.Input<string>;
            lun?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskLun>;
            /**
             * Name is the device name
             */
            name?: pulumi.Input<string>;
            /**
             * Serial provides the ability to specify a serial number for the disk device.
             */
            serial?: pulumi.Input<string>;
            /**
             * If specified the disk is made sharable and multiple write from different VMs are permitted
             */
            shareable?: pulumi.Input<boolean>;
            /**
             * If specified, disk address and its tag will be provided to the guest via config drive metadata
             */
            tag?: pulumi.Input<string>;
        }

        /**
         * If specified, the virtual disk will be presented with the given block sizes.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSize {
            custom?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeCustom>;
            matchVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeMatchVolume>;
        }

        /**
         * CustomBlockSize represents the desired logical and physical block size for a VM disk.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeCustom {
            logical?: pulumi.Input<number>;
            physical?: pulumi.Input<number>;
        }

        /**
         * Represents if a feature is enabled or disabled.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeMatchVolume {
            /**
             * Enabled determines if the feature should be enabled or disabled on the guest.
             * Defaults to true.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a cdrom to the vmi.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskCdrom {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to true.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Tray indicates if the tray of the device is open or closed.
             * Allowed values are "open" and "closed".
             * Defaults to closed.
             */
            tray?: pulumi.Input<string>;
        }

        /**
         * Attach a volume as a disk to the vmi.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskDisk {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi, usb.
             */
            bus?: pulumi.Input<string>;
            /**
             * If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
             */
            pciAddress?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
        }

        /**
         * Attach a volume as a LUN to the vmi.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskLun {
            /**
             * Bus indicates the type of disk device to emulate.
             * supported values: virtio, sata, scsi.
             */
            bus?: pulumi.Input<string>;
            /**
             * ReadOnly.
             * Defaults to false.
             */
            readonly?: pulumi.Input<boolean>;
            /**
             * Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
             */
            reservation?: pulumi.Input<boolean>;
        }

        /**
         * VolumeSource represents the source of the volume to map to the disk.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSource {
            dataVolume?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourceDataVolume>;
            persistentVolumeClaim?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourcePersistentVolumeClaim>;
        }

        /**
         * DataVolume represents the dynamic creation a PVC for this volume as well as
         * the process of populating that PVC with a disk image.
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourceDataVolume {
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * Name of both the DataVolume and the PVC in the same namespace.
             * After PVC population the DataVolume is garbage collected by default.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
         * Directly attached to the vmi via qemu.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourcePersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName?: pulumi.Input<string>;
            /**
             * Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
             */
            hotpluggable?: pulumi.Input<boolean>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * RemoveVolumeOptions when set indicates a volume should be removed. The details
         * within this field specify how to add the volume
         */
        export interface VirtualMachineStatusVolumeRequestsRemoveVolumeOptions {
            /**
             * When present, indicates that modifications should not be
             * persisted. An invalid or unrecognized dryRun directive will
             * result in an error response and no further processing of the
             * request. Valid values are:
             * - All: all dry run stages will be processed
             */
            dryRun?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name represents the name that maps to both the disk and volume that
             * should be removed
             */
            name?: pulumi.Input<string>;
        }

        export interface VirtualMachineStatusVolumeSnapshotStatuses {
            /**
             * True if the volume supports snapshotting
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Volume name
             */
            name?: pulumi.Input<string>;
            /**
             * Empty if snapshotting is enabled, contains reason otherwise
             */
            reason?: pulumi.Input<string>;
        }

        /**
         * VolumeUpdateState contains the information about the volumes set
         * updates related to the volumeUpdateStrategy
         */
        export interface VirtualMachineStatusVolumeUpdateState {
            volumeMigrationState?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeUpdateStateVolumeMigrationState>;
        }

        /**
         * VolumeMigrationState tracks the information related to the volume migration
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationState {
            /**
             * MigratedVolumes lists the source and destination volumes during the volume migration
             */
            migratedVolumes?: pulumi.Input<pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumes>[]>;
        }

        /**
         * StorageMigratedVolumeInfo tracks the information about the source and destination volumes during the volume migration
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumes {
            destinationPVCInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesDestinationPVCInfo>;
            sourcePVCInfo?: pulumi.Input<inputs.kubevirt.v1alpha3.VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesSourcePVCInfo>;
            /**
             * VolumeName is the name of the volume that is being migrated
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * DestinationPVCInfo contains the information about the destination PVC
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesDestinationPVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

        /**
         * SourcePVCInfo contains the information about the source PVC
         */
        export interface VirtualMachineStatusVolumeUpdateStateVolumeMigrationStateMigratedVolumesSourcePVCInfo {
            /**
             * AccessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Capacity represents the capacity set on the corresponding PVC status
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * ClaimName is the name of the PVC
             */
            claimName?: pulumi.Input<string>;
            /**
             * Percentage of filesystem's size to be reserved when resizing the PVC
             */
            filesystemOverhead?: pulumi.Input<string>;
            /**
             * Preallocated indicates if the PVC's storage is preallocated or not
             */
            preallocated?: pulumi.Input<boolean>;
            /**
             * Requests represents the resources requested by the corresponding PVC spec
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * VolumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue?: pulumi.Input<string>;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount?: pulumi.Input<number>;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType?: pulumi.Input<string>;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1?: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager?: pulumi.Input<string>;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation?: pulumi.Input<string>;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource?: pulumi.Input<string>;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time?: pulumi.Input<string>;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType?: pulumi.Input<string>;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1?: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager?: pulumi.Input<string>;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation?: pulumi.Input<string>;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource?: pulumi.Input<string>;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time?: pulumi.Input<string>;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp?: pulumi.Input<string>;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp?: pulumi.Input<string>;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName?: pulumi.Input<string>;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation?: pulumi.Input<number>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields?: pulumi.Input<pulumi.Input<inputs.meta.v1.ManagedFieldsEntry>[]>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.meta.v1.OwnerReference>[]>;
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp?: pulumi.Input<string>;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp?: pulumi.Input<string>;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName?: pulumi.Input<string>;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation?: pulumi.Input<number>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields?: pulumi.Input<pulumi.Input<inputs.meta.v1.ManagedFieldsEntryPatch>[]>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.meta.v1.OwnerReferencePatch>[]>;
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: pulumi.Input<string>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

    }
}
