// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Virtualmachine extends pulumi.CustomResource {
    /**
     * Get an existing Virtualmachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualmachineState, opts?: pulumi.CustomResourceOptions): Virtualmachine {
        return new Virtualmachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harvester:index/virtualmachine:Virtualmachine';

    /**
     * Returns true if the given object is an instance of Virtualmachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Virtualmachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Virtualmachine.__pulumiType;
    }

    public readonly cloudinit!: pulumi.Output<outputs.VirtualmachineCloudinit | undefined>;
    public readonly cpu!: pulumi.Output<number | undefined>;
    /**
     * To enable VM CPU pinning, ensure that at least one node has the CPU manager enabled
     */
    public readonly cpuPinning!: pulumi.Output<boolean | undefined>;
    /**
     * Any text you want that better describes this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disks!: pulumi.Output<outputs.VirtualmachineDisk[]>;
    public readonly efi!: pulumi.Output<boolean | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly inputs!: pulumi.Output<outputs.VirtualmachineInput[] | undefined>;
    /**
     * To enable isolate emulator thread, ensure that at least one node has the CPU manager enabled, also VM CPU pinning must
     * be enabled. Note that enable option will allocate an additional dedicated CPU.
     */
    public readonly isolateEmulatorThread!: pulumi.Output<boolean | undefined>;
    public readonly machineType!: pulumi.Output<string>;
    public readonly memory!: pulumi.Output<string | undefined>;
    public /*out*/ readonly message!: pulumi.Output<string>;
    /**
     * A unique name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly networkInterfaces!: pulumi.Output<outputs.VirtualmachineNetworkInterface[]>;
    public /*out*/ readonly nodeName!: pulumi.Output<string>;
    public readonly reservedMemory!: pulumi.Output<string | undefined>;
    /**
     * restart vm after the vm is updated
     */
    public readonly restartAfterUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * more info: https://kubevirt.io/user-guide/virtual_machines/run_strategies/
     */
    public readonly runStrategy!: pulumi.Output<string | undefined>;
    /**
     * EFI must be enabled to use this feature
     */
    public readonly secureBoot!: pulumi.Output<boolean | undefined>;
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly start!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualmachineTimeouts | undefined>;
    public readonly tpm!: pulumi.Output<outputs.VirtualmachineTpm | undefined>;
    public readonly virtualmachineId!: pulumi.Output<string>;

    /**
     * Create a Virtualmachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualmachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualmachineArgs | VirtualmachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualmachineState | undefined;
            resourceInputs["cloudinit"] = state ? state.cloudinit : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["cpuPinning"] = state ? state.cpuPinning : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["efi"] = state ? state.efi : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["isolateEmulatorThread"] = state ? state.isolateEmulatorThread : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["reservedMemory"] = state ? state.reservedMemory : undefined;
            resourceInputs["restartAfterUpdate"] = state ? state.restartAfterUpdate : undefined;
            resourceInputs["runStrategy"] = state ? state.runStrategy : undefined;
            resourceInputs["secureBoot"] = state ? state.secureBoot : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["start"] = state ? state.start : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tpm"] = state ? state.tpm : undefined;
            resourceInputs["virtualmachineId"] = state ? state.virtualmachineId : undefined;
        } else {
            const args = argsOrState as VirtualmachineArgs | undefined;
            if ((!args || args.disks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disks'");
            }
            if ((!args || args.networkInterfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            resourceInputs["cloudinit"] = args ? args.cloudinit : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["cpuPinning"] = args ? args.cpuPinning : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["efi"] = args ? args.efi : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["isolateEmulatorThread"] = args ? args.isolateEmulatorThread : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["reservedMemory"] = args ? args.reservedMemory : undefined;
            resourceInputs["restartAfterUpdate"] = args ? args.restartAfterUpdate : undefined;
            resourceInputs["runStrategy"] = args ? args.runStrategy : undefined;
            resourceInputs["secureBoot"] = args ? args.secureBoot : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tpm"] = args ? args.tpm : undefined;
            resourceInputs["virtualmachineId"] = args ? args.virtualmachineId : undefined;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["nodeName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Virtualmachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Virtualmachine resources.
 */
export interface VirtualmachineState {
    cloudinit?: pulumi.Input<inputs.VirtualmachineCloudinit>;
    cpu?: pulumi.Input<number>;
    /**
     * To enable VM CPU pinning, ensure that at least one node has the CPU manager enabled
     */
    cpuPinning?: pulumi.Input<boolean>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualmachineDisk>[]>;
    efi?: pulumi.Input<boolean>;
    hostname?: pulumi.Input<string>;
    inputs?: pulumi.Input<pulumi.Input<inputs.VirtualmachineInput>[]>;
    /**
     * To enable isolate emulator thread, ensure that at least one node has the CPU manager enabled, also VM CPU pinning must
     * be enabled. Note that enable option will allocate an additional dedicated CPU.
     */
    isolateEmulatorThread?: pulumi.Input<boolean>;
    machineType?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualmachineNetworkInterface>[]>;
    nodeName?: pulumi.Input<string>;
    reservedMemory?: pulumi.Input<string>;
    /**
     * restart vm after the vm is updated
     */
    restartAfterUpdate?: pulumi.Input<boolean>;
    /**
     * more info: https://kubevirt.io/user-guide/virtual_machines/run_strategies/
     */
    runStrategy?: pulumi.Input<string>;
    /**
     * EFI must be enabled to use this feature
     */
    secureBoot?: pulumi.Input<boolean>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    start?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualmachineTimeouts>;
    tpm?: pulumi.Input<inputs.VirtualmachineTpm>;
    virtualmachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Virtualmachine resource.
 */
export interface VirtualmachineArgs {
    cloudinit?: pulumi.Input<inputs.VirtualmachineCloudinit>;
    cpu?: pulumi.Input<number>;
    /**
     * To enable VM CPU pinning, ensure that at least one node has the CPU manager enabled
     */
    cpuPinning?: pulumi.Input<boolean>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    disks: pulumi.Input<pulumi.Input<inputs.VirtualmachineDisk>[]>;
    efi?: pulumi.Input<boolean>;
    hostname?: pulumi.Input<string>;
    inputs?: pulumi.Input<pulumi.Input<inputs.VirtualmachineInput>[]>;
    /**
     * To enable isolate emulator thread, ensure that at least one node has the CPU manager enabled, also VM CPU pinning must
     * be enabled. Note that enable option will allocate an additional dedicated CPU.
     */
    isolateEmulatorThread?: pulumi.Input<boolean>;
    machineType?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.VirtualmachineNetworkInterface>[]>;
    reservedMemory?: pulumi.Input<string>;
    /**
     * restart vm after the vm is updated
     */
    restartAfterUpdate?: pulumi.Input<boolean>;
    /**
     * more info: https://kubevirt.io/user-guide/virtual_machines/run_strategies/
     */
    runStrategy?: pulumi.Input<string>;
    /**
     * EFI must be enabled to use this feature
     */
    secureBoot?: pulumi.Input<boolean>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    start?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualmachineTimeouts>;
    tpm?: pulumi.Input<inputs.VirtualmachineTpm>;
    virtualmachineId?: pulumi.Input<string>;
}
