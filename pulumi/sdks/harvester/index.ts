// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CloudinitSecretArgs, CloudinitSecretState } from "./cloudinitSecret";
export type CloudinitSecret = import("./cloudinitSecret").CloudinitSecret;
export const CloudinitSecret: typeof import("./cloudinitSecret").CloudinitSecret = null as any;
utilities.lazyLoad(exports, ["CloudinitSecret"], () => require("./cloudinitSecret"));

export { ClusternetworkArgs, ClusternetworkState } from "./clusternetwork";
export type Clusternetwork = import("./clusternetwork").Clusternetwork;
export const Clusternetwork: typeof import("./clusternetwork").Clusternetwork = null as any;
utilities.lazyLoad(exports, ["Clusternetwork"], () => require("./clusternetwork"));

export { GetCloudinitSecretArgs, GetCloudinitSecretResult, GetCloudinitSecretOutputArgs } from "./getCloudinitSecret";
export const getCloudinitSecret: typeof import("./getCloudinitSecret").getCloudinitSecret = null as any;
export const getCloudinitSecretOutput: typeof import("./getCloudinitSecret").getCloudinitSecretOutput = null as any;
utilities.lazyLoad(exports, ["getCloudinitSecret","getCloudinitSecretOutput"], () => require("./getCloudinitSecret"));

export { GetClusternetworkArgs, GetClusternetworkResult, GetClusternetworkOutputArgs } from "./getClusternetwork";
export const getClusternetwork: typeof import("./getClusternetwork").getClusternetwork = null as any;
export const getClusternetworkOutput: typeof import("./getClusternetwork").getClusternetworkOutput = null as any;
utilities.lazyLoad(exports, ["getClusternetwork","getClusternetworkOutput"], () => require("./getClusternetwork"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetSettingArgs, GetSettingResult, GetSettingOutputArgs } from "./getSetting";
export const getSetting: typeof import("./getSetting").getSetting = null as any;
export const getSettingOutput: typeof import("./getSetting").getSettingOutput = null as any;
utilities.lazyLoad(exports, ["getSetting","getSettingOutput"], () => require("./getSetting"));

export { GetSshKeyArgs, GetSshKeyResult, GetSshKeyOutputArgs } from "./getSshKey";
export const getSshKey: typeof import("./getSshKey").getSshKey = null as any;
export const getSshKeyOutput: typeof import("./getSshKey").getSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshKey","getSshKeyOutput"], () => require("./getSshKey"));

export { GetStorageclassArgs, GetStorageclassResult, GetStorageclassOutputArgs } from "./getStorageclass";
export const getStorageclass: typeof import("./getStorageclass").getStorageclass = null as any;
export const getStorageclassOutput: typeof import("./getStorageclass").getStorageclassOutput = null as any;
utilities.lazyLoad(exports, ["getStorageclass","getStorageclassOutput"], () => require("./getStorageclass"));

export { GetVirtualmachineArgs, GetVirtualmachineResult, GetVirtualmachineOutputArgs } from "./getVirtualmachine";
export const getVirtualmachine: typeof import("./getVirtualmachine").getVirtualmachine = null as any;
export const getVirtualmachineOutput: typeof import("./getVirtualmachine").getVirtualmachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualmachine","getVirtualmachineOutput"], () => require("./getVirtualmachine"));

export { GetVlanconfigArgs, GetVlanconfigResult, GetVlanconfigOutputArgs } from "./getVlanconfig";
export const getVlanconfig: typeof import("./getVlanconfig").getVlanconfig = null as any;
export const getVlanconfigOutput: typeof import("./getVlanconfig").getVlanconfigOutput = null as any;
utilities.lazyLoad(exports, ["getVlanconfig","getVlanconfigOutput"], () => require("./getVlanconfig"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { StorageclassArgs, StorageclassState } from "./storageclass";
export type Storageclass = import("./storageclass").Storageclass;
export const Storageclass: typeof import("./storageclass").Storageclass = null as any;
utilities.lazyLoad(exports, ["Storageclass"], () => require("./storageclass"));

export { VirtualmachineArgs, VirtualmachineState } from "./virtualmachine";
export type Virtualmachine = import("./virtualmachine").Virtualmachine;
export const Virtualmachine: typeof import("./virtualmachine").Virtualmachine = null as any;
utilities.lazyLoad(exports, ["Virtualmachine"], () => require("./virtualmachine"));

export { VlanconfigArgs, VlanconfigState } from "./vlanconfig";
export type Vlanconfig = import("./vlanconfig").Vlanconfig;
export const Vlanconfig: typeof import("./vlanconfig").Vlanconfig = null as any;
utilities.lazyLoad(exports, ["Vlanconfig"], () => require("./vlanconfig"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "harvester:index/cloudinitSecret:CloudinitSecret":
                return new CloudinitSecret(name, <any>undefined, { urn })
            case "harvester:index/clusternetwork:Clusternetwork":
                return new Clusternetwork(name, <any>undefined, { urn })
            case "harvester:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "harvester:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "harvester:index/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "harvester:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "harvester:index/storageclass:Storageclass":
                return new Storageclass(name, <any>undefined, { urn })
            case "harvester:index/virtualmachine:Virtualmachine":
                return new Virtualmachine(name, <any>undefined, { urn })
            case "harvester:index/vlanconfig:Vlanconfig":
                return new Vlanconfig(name, <any>undefined, { urn })
            case "harvester:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("harvester", "index/cloudinitSecret", _module)
pulumi.runtime.registerResourceModule("harvester", "index/clusternetwork", _module)
pulumi.runtime.registerResourceModule("harvester", "index/image", _module)
pulumi.runtime.registerResourceModule("harvester", "index/network", _module)
pulumi.runtime.registerResourceModule("harvester", "index/setting", _module)
pulumi.runtime.registerResourceModule("harvester", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("harvester", "index/storageclass", _module)
pulumi.runtime.registerResourceModule("harvester", "index/virtualmachine", _module)
pulumi.runtime.registerResourceModule("harvester", "index/vlanconfig", _module)
pulumi.runtime.registerResourceModule("harvester", "index/volume", _module)
pulumi.runtime.registerResourcePackage("harvester", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:harvester") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
