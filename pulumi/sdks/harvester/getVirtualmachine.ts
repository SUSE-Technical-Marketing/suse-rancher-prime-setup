// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualmachine(args: GetVirtualmachineArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualmachineResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harvester:index/getVirtualmachine:getVirtualmachine", {
        "id": args.id,
        "name": args.name,
        "namespace": args.namespace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualmachine.
 */
export interface GetVirtualmachineArgs {
    id?: string;
    name: string;
    namespace?: string;
}

/**
 * A collection of values returned by getVirtualmachine.
 */
export interface GetVirtualmachineResult {
    readonly cloudinits: outputs.GetVirtualmachineCloudinit[];
    readonly cpu: number;
    readonly cpuPinning: boolean;
    readonly description: string;
    readonly disks: outputs.GetVirtualmachineDisk[];
    readonly efi: boolean;
    readonly hostname: string;
    readonly id: string;
    readonly inputs: outputs.GetVirtualmachineInput[];
    readonly isolateEmulatorThread: boolean;
    readonly machineType: string;
    readonly memory: string;
    readonly message: string;
    readonly name: string;
    readonly namespace?: string;
    readonly networkInterfaces: outputs.GetVirtualmachineNetworkInterface[];
    readonly nodeName: string;
    readonly reservedMemory: string;
    readonly restartAfterUpdate: boolean;
    readonly runStrategy: string;
    readonly secureBoot: boolean;
    readonly sshKeys: string[];
    /**
     * @deprecated Deprecated
     */
    readonly start: boolean;
    readonly state: string;
    readonly tags: {[key: string]: string};
    readonly tpms: outputs.GetVirtualmachineTpm[];
}
export function getVirtualmachineOutput(args: GetVirtualmachineOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVirtualmachineResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harvester:index/getVirtualmachine:getVirtualmachine", {
        "id": args.id,
        "name": args.name,
        "namespace": args.namespace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualmachine.
 */
export interface GetVirtualmachineOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
}
