// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Storageclass extends pulumi.CustomResource {
    /**
     * Get an existing Storageclass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageclassState, opts?: pulumi.CustomResourceOptions): Storageclass {
        return new Storageclass(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harvester:index/storageclass:Storageclass';

    /**
     * Returns true if the given object is an instance of Storageclass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Storageclass {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Storageclass.__pulumiType;
    }

    public readonly allowVolumeExpansion!: pulumi.Output<boolean | undefined>;
    /**
     * Any text you want that better describes this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly message!: pulumi.Output<string>;
    /**
     * A unique name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * refer to https://longhorn.io/docs/latest/volumes-and-nodes/storage-tags. "migratable": "true" is required for Harvester
     * Virtual Machine LiveMigration
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string}>;
    public readonly reclaimPolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageclassId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.StorageclassTimeouts | undefined>;
    public readonly volumeBindingMode!: pulumi.Output<string | undefined>;
    public readonly volumeProvisioner!: pulumi.Output<string | undefined>;

    /**
     * Create a Storageclass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageclassArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageclassArgs | StorageclassState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageclassState | undefined;
            resourceInputs["allowVolumeExpansion"] = state ? state.allowVolumeExpansion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["reclaimPolicy"] = state ? state.reclaimPolicy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageclassId"] = state ? state.storageclassId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeBindingMode"] = state ? state.volumeBindingMode : undefined;
            resourceInputs["volumeProvisioner"] = state ? state.volumeProvisioner : undefined;
        } else {
            const args = argsOrState as StorageclassArgs | undefined;
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            resourceInputs["allowVolumeExpansion"] = args ? args.allowVolumeExpansion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["reclaimPolicy"] = args ? args.reclaimPolicy : undefined;
            resourceInputs["storageclassId"] = args ? args.storageclassId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeBindingMode"] = args ? args.volumeBindingMode : undefined;
            resourceInputs["volumeProvisioner"] = args ? args.volumeProvisioner : undefined;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Storageclass.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Storageclass resources.
 */
export interface StorageclassState {
    allowVolumeExpansion?: pulumi.Input<boolean>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    message?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    /**
     * refer to https://longhorn.io/docs/latest/volumes-and-nodes/storage-tags. "migratable": "true" is required for Harvester
     * Virtual Machine LiveMigration
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    reclaimPolicy?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageclassId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StorageclassTimeouts>;
    volumeBindingMode?: pulumi.Input<string>;
    volumeProvisioner?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Storageclass resource.
 */
export interface StorageclassArgs {
    allowVolumeExpansion?: pulumi.Input<boolean>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    /**
     * refer to https://longhorn.io/docs/latest/volumes-and-nodes/storage-tags. "migratable": "true" is required for Harvester
     * Virtual Machine LiveMigration
     */
    parameters: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    reclaimPolicy?: pulumi.Input<string>;
    storageclassId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StorageclassTimeouts>;
    volumeBindingMode?: pulumi.Input<string>;
    volumeProvisioner?: pulumi.Input<string>;
}
